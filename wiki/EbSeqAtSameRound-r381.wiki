#summary 同一拍中，战士动作先后顺序算法

<wiki:toc/>

= eb0:同轮动作判定 =

== 思路 ==

eb 的设计在同一轮中仍然有动作先后关系。（树叶飘落，掠过，那一瞬，出手，飞刀略快100毫秒， 上官金虹死，李寻欢活）

也就是说虽然大家是同时出招， 但是先出手的胜。 不会有互砍，同时掉血的情况。当然如果后出手的没死， 那么一轮下来两人都掉了血，没差别。 只有砍死那一拍，会有差别。

而行走也是一样。 比如两人并排站着。  都要向左走一步。 如果左边那个先走，那么结果是大家都向左一步。  如果右边那个先走， 由于左边有人，因此失败。 然后左边的走一步。 他们中间就留下了一个空档。 右边那个原地没动。


这就是：EB 战场最好玩的地方。 所谓：*战场不确定性。和混乱性。*

== act_sequence ==

在schema.hrl  代码中， 某人在 soldier.act_sequence 边上留下了个注释： （目前未理解其作用）， 这个特性今天我编程完成了。是EB最后实现的一个特性。

act_sequence 的用途是让指挥官控制同一拍中自己部队的这些武士前进的次序。 
就可以解决刚才说的 *并排向左一步* 的问题。 

 * 给左边那个act_sequence = 1，右边那个 = 2. 
 * EB 战场程序就会安排左边的先走，右边的后走。
 这样你就能够精确控制自己部队的行为。

== 判定算法 ==
*具体讲下EB 对于战场上同一节拍动作先后关系的判定算法。*

假设::
 * sequenece 的设置
  * 红方为 [8，8，6，4，8，3，3，9，3]
  * 蓝方为 [0，1，9，4，0，3，1，9，3]

此时红方应该先走的是3个序号为3 的战士，  而蓝方有两个为0 的战士。   但并不代表蓝方会先走。 EB 会首先从红方3个3中随机取1个战士， 蓝方两个0 中取一个战士。 然后在这两个战士中随机抽一个先走。

假设::
 * 抽了4轮，碰巧两边各消耗2个。 
 * 此时红方还剩1个3， 蓝方没有0了。 
 系统会找到蓝方第二优先级的 2个1 中抽一个， 继续和红方剩下那个3 继续去扔随机数

也就是说:
 * sequence 是在自己队内排序的依据。 
 * 队之间完全碰运气决定谁先动。 
 
 运气不好会别人连出招几次，自己还没出。这就是EB 提供的战场偶然性。 当你偶然在某个位置多砍了别人几刀，是否能够*乘势*突破， 巩固这个有利因素，就是你算法的优劣程度了。

~ ZoomQuiet ::
 * *乘势* 用的非常好,含义就是指挥进程必须可以实时理解并核算战场上各对战情景我方的 *势*值有多高,并下达对应的作战指令!


== 隐含特点 ==

这里还有一个特点（我是在写这封信的时候想到的）；

假设:
 * 双方有3个战士已经面对面站着开砍了。 
 * 另外每方都有3个战士处于行走状态，未触敌。

此时sequence 顺序:
 * 红方是[1，1，1，1，1，1] ， 
 * 蓝方是[1，1，1，2，2，2]  （后面的3个是未触敌的）。
按照算法红方在6个里选一个， 蓝方在3个里选一个。然后双方碰运气。由于双方碰运气的几率是一样的。因此：
{{{
红方发动砍人的几率是  3/6/2  = 25%   
蓝方发动砍人的几率是  3/3/2 = 50% .   
}}}
 * *也就是说蓝方先砍的机会要比红方高2倍！*
 * 红方的一半运气用到了无所谓的先走一步上去了，而不是用在关键的先砍一刀上。
 * 更进一步如果那三个开砍的战士中有一个已经就差一刀了。 
 * 那么精确的设[1，2，2，3，3，3] 就更重要了。 


呵呵，能理解吗？ 最好的办法是看程序，看了就明白了。


= 讨论 =
`~ 程序的优美出自算法的简洁,编辑的单纯! 当前看这种设定有点复杂...`
ZoomQuiet::
 * 这里的sequence 应该是每轮(EB秒,同次战场节拍中)各方战队内部可以任意调节的吧!
 * 目的应该是解决类似:
  * 在B秒,678号战士同时右移 ~ 这又有内在的顺序性,但是,的确是同时,同一EB秒,战场节拍内
  * 这种真实存在的配合行动,为了在空间上不违反 [ErlBattleRule EB世界法则]:
   * *当两个战士同时进入一个格子时，后进入者会失败*
  * 同时,又在时间上也吻合时间的同时性
{{{  
即: 战士[6,7,8] 的 sequnce |-> [1,2,3]
    对于战场来讲是合理的一次配合行动
若: 战士[6,7,8] 的 sequnce |-> [1,1,1]
    对于战场来讲则不一定是合理的
}}}
 * *所以!* 应该不存在,同一战队的战士,在同一节拍的行动,要看 sequnce 值的级别来进行随机裁决的!

前例分析::假设
 * sequenece 的设置
  * 战士为 [1，2，3，4，5，6，7，8，9] 
  * 红方为 [8，8，6，4，8，3，3，9，3] 自N->S攻击
  * 蓝方为 [0，1，9，4，0，3，1，9，3] 自S->N攻击
 * 在第7秒的行动指令:
  * 红方为 [攻前，攻前，左移，左移，攻前，后退，后退，转右，左移]
  * 蓝方为 [转左，攻前，后退，右进(前次完成了右转)，转左，前进，攻前，后退，前进]
*则理应*
{{{
若不考虑兰方的行动 
    |-> 红方指令成立,所有行动都得到执行!
若考虑兰方的行动但是双方都没有接触 
    |-> 红方指令成立,所有行动都得到执行!
    |-> 兰方指令成立,所有行动都得到执行!但是 右进战士行动失败~被3号战士挡住了
若考虑兰方的行动而且双方战线已经接触
    |-> 双方指令成立,所有行动都得到通过!但是:
       |-> 双方2号战士顺序要随机判定
}}}

*即* act_sequence 的含义应该是:
 * 各轮行动中战队内部的行动配合次序
 * 同一节拍内,所有战士的合理行动都应该成立
 * 同一节拍内,所有战士的合理行动除非有对战行为,否则没有随机限制
 * 同一节拍内,所有战士行动,是独立并行的,除非有配合的一致性要求,否则和act_sequence没有关系


 * 同前分析, act_sequnce 序列,应该仅仅约束同时吻合以下情景的行动:
  * 同一节拍中
  * 同一战队中
  * 行动必须有先后配合
 * 即! act_sequnce 序列*仅仅用于战队内部!!!*

以上假设:
 * 双方有3个战士已经面对面站着开砍了。 
 * 则不论 act_sequnce 序列如何,随机性也应该仅仅发生在 3个有对战关系的战士中
 * 双方成功比率都是 `50%` 的概率,和对战数量没有关系!
 

 
