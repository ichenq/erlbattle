#summary ECUG 学习项目 ~ 恶狼战役 主战场设计
#labels Featured

<wiki:toc/>

= EB:算法和决策 =

本文简单的将主战场算法中的一些要点的决策原因列出来。便于大家理解程序

== 算法思路 ==

1. 主程序如何管理指挥程序发来的消息，并管理之

主程序维护两个指令队列。指挥命令来的时候都写队列。每个角色只有一个队列。时钟节拍来得时候，先运算结果，然后将可以完成当前动作的战士在队列中的动作取出来，作为下一个动作。 这个队列各方自己可以看到，对方看不到。 所有时间小于当前时间的指令都会被生效。后发的动作指令会冲掉先发的动作指令。时间 = 0 指令代表立即执行的动作。 

2. 计算战斗动作
   由于当两个战士同时进入一个格子时，后进入者会失败；而互砍情况就更加如此。如果以某种方式排序，每次都是某人先动的话就有失公平。因此应该采用随机的方法决定哪个角色的动作应该先生效（同一个节拍的动作）。 就好比虽然大家同时出刀，但是由于种种不确定原因（比如太阳晃眼）造成我的刀就是比你快了一点点，把你杀死了。

 * [EbSequenceDesign EB:如何控制战场时间节拍和指令时序]

== 算法TODO ==

1. 为了规避决策子程序向主程序疯狂发消息，阻塞别人的任务处理，因此主程序启动时会将启动两个通讯进程。这两个通讯进程负责向主程序发送指令。 通讯进程启动后，再启动决策子程序。决策子程序只能向自己的通讯进程发消息，因此就能解决上述问题。 

2. 主程序如果运算完后立刻进行下一个节拍，可能会留给子程序的时间过短，因此考虑每个节拍至少要一个固定的时间。 但是这个时间不能以毫秒为单位设置，因为如果设置固定时间的话，较快的电脑留给决策程序的运算时间就会较长， 会造成在不同电脑上，战斗结果不同的问题。 我考虑主程序启动后进行一个电脑测速的动作，运算若干次某种复杂运算，将其时间作为节拍的时间。 这样如果电脑快的话，这个时间会短，电脑慢的话，这个时间会长。决策程序的运算时间也就变成相似了。 （这个特性未来添加）

= Discuss =