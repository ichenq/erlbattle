#summary worldClock 和令牌 的差别
#labels Phase-Design,Phase-Support

<wiki:toc/>
讨论发源地::
 * [http://groups.google.com/group/ecug/browse_thread/thread/4a403b89db6e56cf 恶狼战役： “时钟要保障每台不同的机器有相同的运算结果” 的进一步解释]^ - ECUG~erlang中文用户组 | Google 网上论坛^

= 问题 =
eb0 使用的worldclock(战场节拍） 和 令牌模式是有差别的。理解这个差别对于理解eb 整体结构非常重要。 

== 令牌? ==
*从令牌角度而言，系统会如下面方式运行：（大概这个意思）*

 #  world clock 向战场程序发出令牌。
 #  战场程序更新战场状态，后向决策程序发出令牌
 #  决策程序在收到令牌后开始计算， 并在若干秒内完成决策，并向战场程序发出任务指令。令牌又转到战场程序
 #  战场程序收到令牌后，更新战士动作
 #  战场程序将令牌传回给world clock
 #  wolrd clock 休息若干秒后重复。


 这种令牌模式有一个问题，就是要求“决策程序自律”， 必须收到令牌后才可以开始计算。 并且没有收到令牌不允许向战场程序发消息。 发消息的话，不能狂发，必须每个战士只能发一个。。。。

 另一个问题是这样的一种令牌传递，让整个系统不再是一个并行的erlang 程序了，而是一个串行/准串行的程序。不能体现erlang 的优势了。


== eb0:构想 ==
*eb0 构想的运行模式不同：*

 * 战场独立运行， 每次接收到world clock 指令的时候，计算一次战场状态。 然后对于处于wait 状态的战士，去指令队列中取下一个指令。 如果有指令的话就开始下一个动作。 没有的话就继续wait.
 * 决策程序独立运行。 自己看着战场时间和战场状态最新情况； 按照自己的决策，发出自己的指令。 如果前面有未执行的指令，就冲掉老指令。 如果指令发的时机不对，错过了这个节拍，那么战士空等一拍，下拍执行这个指令
{{{
 这两个 1 不是笔误， 他们是并行的没有先后关系。
}}}
  * 这样玩家编写决策程序的时候，没有任何限制。*没有限制就不会违反限制*。狂发消息只会堵塞自己，不会干扰战场的运作和别人的指令。
 * 大家都是real time 进行决策（在战场运算状态的时候，也可以同时算自己的方案），而不是回合制的决策。 如果按照上述令牌制的话，由于决策程序是大家自己写的，狡猾的指挥官仍然会在没有令牌的时候去偷偷的提前算方案。 


= 小节 =
*总结：EB 是实时决策， 令牌算法是回合制决策。 *

= Discuss =