<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet ekr_test?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.211023622047">
	<global_window_position top="0" left="0" height="716" width="1278"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="zoomq.20090728225613.1" str_leo_pos="2,0,1,2"><vh>@chapters</vh></v>
<v t="zoomq.20090728225824.1"><vh>stuff</vh>
<v t="zoomq.20090728225824.2"><vh>logging.conf</vh></v>
<v t="zoomq.20090728225824.3"><vh>dict sort</vh></v>
<v t="zoomq.20090728225824.4"><vh>groups.google</vh></v>
<v t="zoomq.20090728225824.5" a="M"><vh>chart tilog</vh>
<v t="zoomq.20090728225824.6"><vh>unittest</vh>
<v t="zoomq.20090728225824.7"><vh>@nosent foo.py</vh>
<v t="zoomq.20090728225824.8"><vh>add2</vh></v>
</v>
</v>
<v t="zoomq.20090728225824.9"><vh>tpl</vh>
<v t="zoomq.20090728225824.10"><vh>@nosent adp_dailyrep.tpl</vh></v>
<v t="zoomq.20090728225824.11"><vh>@nosent adp_historic.tpl</vh></v>
<v t="zoomq.20090728225824.12"><vh>@nosent adp_monthtab.tpl</vh></v>
</v>
<v t="zoomq.20090728225824.13"><vh>@nosent adpanalyzer.py</vh>
<v t="zoomq.20090728225824.14"><vh>&lt;&lt; adpanalyzer declarations &gt;&gt;</vh></v>
<v t="zoomq.20090728225824.15"><vh>flushHistoric</vh>
<v t="zoomq.20090728225824.16"><vh>&lt;&lt;monthlink&gt;&gt;</vh></v>
<v t="zoomq.20090728225824.17"><vh>&lt;&lt;PVdetail&gt;&gt;</vh></v>
<v t="zoomq.20090728225824.18"><vh>&lt;&lt;PVrep&gt;&gt;</vh></v>
</v>
<v t="zoomq.20090728225824.19"><vh>adpAmount</vh></v>
<v t="zoomq.20090728225824.20"><vh>adpDaily</vh></v>
<v t="zoomq.20090728225824.21"><vh>drawDailyPie</vh></v>
<v t="zoomq.20090728225824.22"><vh>repAll</vh></v>
<v t="zoomq.20090728225824.23"><vh>chartDadp</vh></v>
<v t="zoomq.20090728225824.24"><vh>chartHistoric</vh></v>
</v>
<v t="zoomq.20090728225824.25"><vh>@nosent zipadplog.sh</vh></v>
<v t="zoomq.20090728225824.26"><vh>stateCASE</vh>
<v t="zoomq.20090728225824.27"><vh>yseo6</vh>
<v t="zoomq.20090728225824.28" a="E"><vh>tpl4shell</vh>
<v t="zoomq.20090728225824.29"><vh>@nosent yseo6_adpanalyzer.sh.tpl</vh></v>
<v t="zoomq.20090728225824.30"><vh>@nosent yseo6_adpanalyzer.filter.tpl</vh></v>
<v t="zoomq.20090728225824.31"><vh>@nosent yseo6_adpanalyzer.sort.tpl</vh></v>
</v>
<v t="zoomq.20090728225824.32"><vh>@nosent yseo6_adpLogShell.py</vh></v>
</v>
<v t="zoomq.20090728225824.33"><vh>070612urgency</vh>
<v t="zoomq.20090728225824.34" a="E"><vh>@nosent urgencyAnalyzer.py</vh>
<v t="zoomq.20090728225824.35"><vh>&lt;&lt; declarations &gt;&gt;</vh></v>
<v t="zoomq.20090728225824.36"><vh>mergeKey</vh></v>
<v t="zoomq.20090728225824.37"><vh>flushHisCnt</vh>
<v t="zoomq.20090728225824.38"><vh>&lt;&lt;countPV&gt;&gt;</vh></v>
<v t="zoomq.20090728225824.39"><vh>&lt;&lt;expHTML&gt;&gt;</vh></v>
</v>
<v t="zoomq.20090728225824.40"><vh>flushHisAll</vh>
<v t="zoomq.20090728225824.41"><vh>&lt;&lt;countPV&gt;&gt;</vh></v>
<v t="zoomq.20090728225824.42"><vh>&lt;&lt;expHTML&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="zoomq.20090728225824.43"><vh>070622play50top</vh>
<v t="zoomq.20090728225824.44" a="E"><vh>@nosent urgencyToPlay.py</vh>
<v t="zoomq.20090728225824.45"><vh>&lt;&lt; declarations &gt;&gt;</vh></v>
<v t="zoomq.20090728225824.46"><vh>&lt;&lt;abtDB&gt;&gt;</vh></v>
<v t="zoomq.20090728225824.47" a="E"><vh>flushHisPlay</vh>
<v t="zoomq.20090728225824.48"><vh>&lt;&lt;countPV&gt;&gt;</vh></v>
<v t="zoomq.20090728225824.49"><vh>&lt;&lt;expHTML&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="zoomq.20090728225824.50"><vh>070703pvuip</vh>
<v t="zoomq.20090728225824.51" a="E"><vh>@nosent urgencyUIPV.py</vh>
<v t="zoomq.20090728225824.52"><vh>&lt;&lt; declarations &gt;&gt;</vh></v>
<v t="zoomq.20090728225824.53"><vh>&lt;&lt;abtDB&gt;&gt;</vh></v>
<v t="zoomq.20090728225824.54"><vh>chartHisPV</vh></v>
<v t="zoomq.20090728225824.55"><vh>chartHisUIP</vh></v>
<v t="zoomq.20090728225824.56"><vh>scaled</vh></v>
</v>
</v>
</v>
<v t="zoomq.20090728225824.57"><vh>@nosent ad10song.py</vh>
<v t="zoomq.20090728225824.58"><vh>&lt;&lt; declarations &gt;&gt;</vh></v>
<v t="zoomq.20090728225824.59"><vh>flushHistoric()</vh>
<v t="zoomq.20090728225824.60"><vh>&lt;&lt;dataRepare&gt;&gt;</vh></v>
<v t="zoomq.20090728225824.61"><vh>&lt;&lt;monthact&gt;&gt;</vh></v>
</v>
<v t="zoomq.20090728225824.62"><vh>flushDumps()</vh></v>
<v t="zoomq.20090728225824.63"><vh>detailsADPlay()</vh></v>
<v t="zoomq.20090728225824.64"><vh>chartHistoric()</vh></v>
</v>
<v t="zoomq.20090728225824.65"><vh>@nosent adclicks.py</vh>
<v t="zoomq.20090728225824.66"><vh>&lt;&lt; declarations &gt;&gt;</vh></v>
<v t="zoomq.20090728225824.67"><vh>staToday()</vh></v>
<v t="zoomq.20090728225824.68"><vh>flushDumps()</vh></v>
<v t="zoomq.20090728225824.69"><vh>detailsADPlay()</vh></v>
<v t="zoomq.20090728225824.70"><vh>chartAdpHistoric()</vh>
<v t="zoomq.20090728225824.71"><vh>&lt;&lt;chartMap&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="zoomq.20090728225824.72"><vh>@nosent yksitemapping.py</vh>
<v t="zoomq.20090728225824.73"><vh>&lt;&lt; yksitemapping declarations &gt;&gt;</vh></v>
<v t="zoomq.20090728225824.74"><vh>class sitemapping</vh>
<v t="zoomq.20090728225824.75"><vh>__init__</vh>
<v t="zoomq.20090728225824.76"><vh>abtFile</vh></v>
<v t="zoomq.20090728225824.77"><vh>abtDB</vh></v>
</v>
<v t="zoomq.20090728225824.78"><vh>DBscanner</vh></v>
<v t="zoomq.20090728225824.79"><vh>whatnew</vh>
<v t="zoomq.20090728225824.80"><vh>hotop</vh></v>
<v t="zoomq.20090728225824.81"><vh>hisotic</vh></v>
<v t="zoomq.20090728225824.82"><vh>tracall</vh></v>
</v>
<v t="zoomq.20090728225824.83"><vh>_smartcode</vh></v>
<v t="zoomq.20090728225824.84"><vh>gzipall</vh></v>
<v t="zoomq.20090728225824.85"><vh>map2gz</vh></v>
<v t="zoomq.20090728225824.86"><vh>xmlurl</vh></v>
<v t="zoomq.20090728225824.87"><vh>mapall</vh></v>
<v t="zoomq.20090728225824.88"><vh>genidx</vh></v>
</v>
</v>
</v>
<v t="zoomq.20090728225613.2" a="E"><vh>PyEBreplay</vh>
<v t="zoomq.20090728225824.89" a="E" tnodeList="zoomq.20090728225824.89,zoomq.20090728225824.90,zoomq.20090728225824.91,zoomq.20090728225824.92,zoomq.20090728225824.113,zoomq.20090728225824.112,zoomq.20090728225824.95,zoomq.20090728225824.110,zoomq.20090729011307.1,zoomq.20090728225824.109,zoomq.20090728225824.106,zoomq.20090728225824.108,zoomq.20090728225824.111,zoomq.20090728225824.107"><vh>@nosent eb0replayer.py</vh>
<v t="zoomq.20090728225824.90"><vh>&lt;&lt; declarations &gt;&gt;</vh></v>
<v t="zoomq.20090728225824.91" a="E"><vh>class replayer</vh>
<v t="zoomq.20090728225824.92"><vh>__init__</vh>
<v t="zoomq.20090728225824.113"><vh>eb</vh></v>
<v t="zoomq.20090728225824.112"><vh>ui</vh></v>
</v>
<v t="zoomq.20090728225824.95"><vh>init_ebf</vh></v>
<v t="zoomq.20090728225824.110"><vh>exp_ebf</vh></v>
<v t="zoomq.20090729011307.1"><vh>_rewar</vh></v>
<v t="zoomq.20090728225824.109"><vh>play</vh></v>
<v t="zoomq.20090728225824.106"><vh>run2</vh></v>
<v t="zoomq.20090728225824.108"><vh>run1</vh></v>
<v t="zoomq.20090728225824.111"><vh>_draw_screen</vh></v>
<v t="zoomq.20090728225824.107"><vh>run0</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="zoomq.20090728225613.1"></t>
<t tx="zoomq.20090728225613.2">@path PyEBreplayer</t>
<t tx="zoomq.20090728225824.1">dot
    层级向量图谱
    The default GraphViz layout for directed graph layouts
neato
    关系图
    For undirected graph layouts - spring model
twopi
    压缩关系图
    For undirected graph layouts - radial
circo
    稀疏?图谱
    For undirected graph layouts - circular
fdp
    思维图
    For undirected graph layouts - force directed spring model
</t>
<t tx="zoomq.20090728225824.2">
[loggers]
keys=root,example

[handlers]
keys=consoleHandler,rotateFileHandler

[formatters]
keys=simpleFormatter

[formatter_simpleFormatter]
format=[%(asctime)s](%(levelname)s)%(name)s : %(message)s

[logger_root]
level=DEBUG
handlers=consoleHandler,rotateFileHandler

[logger_example]
level=DEBUG
handlers=consoleHandler,rotateFileHandler
qualname=example
propagate=0

[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=simpleFormatter
args=(sys.stdout,)

[handler_rotateFileHandler]
class=handlers.RotatingFileHandler
level=DEBUG
formatter=simpleFormatter
args=('test.log', 'a', 200000, 9)
</t>
<t tx="zoomq.20090728225824.3">
sorted( iterable[, cmp[, key[, reverse]]])
    Return a new sorted list from the items in iterable. The optional
arguments cmp, key, and reverse have the same meaning as those for the
list.sort() method. New in version 2.4. 

&gt;&gt;&gt;

for k, v in sorted(myDict.items()
    , key=lambda x: x[1]
    ,reverse=True):
    print k,v 

&gt;&gt;&gt;&gt;a better and quicker way:

from operator import itemgetter
sorted(myDict.iteritems(), key=itemgetter(1), reverse=True)

:)

</t>
<t tx="zoomq.20090728225824.4">http://groups.google.com/group/python-cn/browse_thread/thread/1f674f2fe812fc67/b1f034f965d230ff?lnk=gst&amp;q=%E5%AD%97%E5%85%B8%E6%8E%92%E5%BA%8F&amp;rnum=1#b1f034f965d230ff
</t>
<t tx="zoomq.20090728225824.5">@path adpvstats

for YKSEO:
    yseo6
    </t>
<t tx="zoomq.20090728225824.6">@path adpvstats/test

</t>
<t tx="zoomq.20090728225824.7">@others

if __name__ == '__main__':      # this way the module can be
    add2(1,1.1)
    print "Mnnnn export all that report!!!!"


</t>
<t tx="zoomq.20090728225824.8">
def add2(one,two):
    print float(one+two)
    return float(one+two)


</t>
<t tx="zoomq.20090728225824.9">export HTML's .tpl</t>
<t tx="zoomq.20090728225824.10">&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html;charset=utf-8"&gt;
    &lt;title&gt;%(repTitle)s&lt;/title&gt;	
&lt;/head&gt;

&lt;body&gt;
&lt;style type="text/css"&gt;
ul li{
	color: #343;
    font-size: 10.5px; 
}
&lt;/style&gt;
    &lt;h3&gt;乐库推广/广告位PV/UID收益每日统计
    &lt;sup&gt; %(myVer)s &lt;/sup&gt;
    &lt;sub&gt; %(creaTime)s 生成 &lt;/sub&gt;
    &lt;sup&gt; 返回&lt;a href="index.html"&gt;历史分析总图&lt;/a&gt; &lt;/sup&gt;
    &lt;/h3&gt;

    &lt;table&gt;

    &lt;tr&gt;
        &lt;th&gt;总PV收益:%(sumPV)s &lt;/th&gt;
        &lt;th&gt;总UID收益:%(sumUIP)s &lt;/th&gt;    
    &lt;tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;img src="yueku-adpv-%(tonow)s.png"/&gt;&lt;/td&gt;
        &lt;td&gt;&lt;img src="yueku-aduip-%(tonow)s.png"/&gt;&lt;/td&gt;
    &lt;tr&gt;
    &lt;/table&gt;
&lt;b&gt;Top10 PV贡献细则::&lt;/b&gt;
&lt;table&gt;
    &lt;tr&gt;
%(songDetail)s
    &lt;tr&gt;
&lt;/table&gt;


&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="zoomq.20090728225824.11">&lt;html&gt;

&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html;charset=utf-8"&gt;
    &lt;title&gt;%(repTitle)s&lt;/title&gt;
&lt;/head&gt;
&lt;body topmargin="5" leftmargin="5" rightmargin="0" marginwidth="5" marginheight="5"&gt;
&lt;style type="text/css"&gt;
th {
	color: #343;
    font-size: 12px; 
}
th a{
	color: #454;
    font-size: 11px; 
}
table#pvDetails td{
	color: #434;    
    font-size: 10.5px;
    border-bottom: 1px solid #dcd; 
    border-right: 1px solid #cdc; 
}
table#pvDetails th{
    font-size: 11px;
    border: 1px dotted #cbc;
}

&lt;/style&gt;
&lt;table border="0" CELLSPACING="0"&gt;
&lt;tr&gt;
&lt;td style='vertical-align: top'&gt;
    &lt;h3&gt;乐库推广/广告位PV/UIP收益统计
    &lt;/h3&gt;
&lt;/td&gt;
&lt;td style='vertical-align: top'&gt;
月度数据:%(monthStatus)s
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td style='vertical-align: top'&gt;
    &lt;sup&gt;&lt;i&gt;可点击各数据节进入详细分析图表！&lt;i&gt;&lt;/sup&gt;&lt;br/&gt;
        &lt;img src="adphistoric-all.png" border="0" usemap="#mapHistoric"/&gt;
        &lt;hr/&gt;
&lt;sub&gt;数值若出现陡峭变化现象，
&lt;br/&gt;可能在进行统计程序的调整，
&lt;br/&gt;请与周琦(5528)联系询问&lt;/sub&gt;

&lt;/td&gt;
&lt;td style='vertical-align: top'&gt;
    &lt;b&gt;推广/广告位PV收益统计表&lt;/b&gt;
    &lt;sub&gt;%(myVer)s &lt;/sub&gt;
&lt;sup&gt; %(creaTime)s 生成  &lt;/sup&gt;

&lt;table id="pvDetails" border="0" CELLSPACING="0"&gt;
%(pvDetails)s
&lt;/table&gt;    
&lt;/td&gt;
&lt;/tr&gt;
&lt;table&gt;

    &lt;map name="mapHistoric"&gt;
    %(imageMap)s
    &lt;/map&gt;

&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="zoomq.20090728225824.12">&lt;html&gt;

&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html;charset=utf-8"&gt;
    &lt;title&gt;%(repTitle)s&lt;/title&gt;
&lt;/head&gt;
&lt;body topmargin="5" leftmargin="5" rightmargin="0" marginwidth="5" marginheight="5"&gt;
&lt;style type="text/css"&gt;
th {
	color: #343;
    font-size: 12px; 
}
th a{
	color: #454;
    font-size: 11px; 
}
table#pvDetails td{
	color: #434;    
    font-size: 10.5px;
    border-bottom: 1px solid #dcd; 
    border-right: 1px solid #cdc; 
}

table#pvDetails th{
    font-size: 11px;
    border: 1px dotted #cbc;
}

&lt;/style&gt;
&lt;table border="0" CELLSPACING="0"&gt;
&lt;tr&gt;
&lt;td style='vertical-align: top'&gt;
    &lt;h3&gt;乐库推广/广告位PV/UIP收益统计
    &lt;/h3&gt;
&lt;/td&gt;
&lt;td style='vertical-align: top'&gt;
    &lt;a href="../index.html"&gt;返回当月收益统计&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;td style='vertical-align: top'&gt;
    &lt;sup&gt;&lt;i&gt;可点击各数据节进入详细分析图表！&lt;i&gt;&lt;/sup&gt;&lt;br/&gt;
        &lt;img src="adphistoric-all.png" border="0" usemap="#mapHistoric"/&gt;
&lt;/td&gt;
&lt;td style='vertical-align: top'&gt;
    &lt;b&gt;推广/广告位PV收益统计表&lt;/b&gt;
    &lt;sub&gt;%(myVer)s &lt;/sub&gt;
&lt;sup&gt; %(creaTime)s 生成  &lt;/sup&gt;


&lt;table id="pvDetails" border="1"&gt;
%(pvDetails)s
&lt;/table&gt;    
&lt;/td&gt;
&lt;/tr&gt;
&lt;table&gt;

    &lt;map name="mapHistoric"&gt;
    %(imageMap)s
    &lt;/map&gt;

&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="zoomq.20090728225824.13">&lt;&lt; adpanalyzer declarations &gt;&gt;

@others

if __name__ == '__main__':      # this way the module can be
    if 3 != len(sys.argv):
        print """ %s usage::
        $ python adpanalyzer.py 'path/to/stxihei.ttf' datePoint [like 070501]
        """ % VERSION
    else:
        defaultfont = sys.argv[1]           #[-10:-4]    print tonow
        tonow = sys.argv[2]                 #[-10:-4]    print tonow
        log = 'analyzed/ziped-adPoint%s.log'%tonow
        print "tyr to analyzing and chart daily log ::%s"%log
        exp = "exp"         #/home/zoomq/workspace/mu_tangle_ZoomQuiet/YKSEO/    
        dailyDump = "%s/yueku-adaily-%s.dump" % (exp,tonow)
        dailyTpl = 'adp_dailyrep.tpl'
        historicTpl = 'adp_historic.tpl'
        dailyRep = "%s/yueku-adaily-%s.html" % (exp,tonow)        
        
        adpDaily(log)
        drawDailyPie(defaultfont,tonow)
        pickle.dump(ADPA,open(dailyDump,"w"))
        repAll(dailyTpl,dailyRep,exp,tonow)
        flushHistoric(historicTpl,exp,"乐库推广合作PV/UIP收益统计")
        
    print "Mnnnn export all that report!!!!"


</t>
<t tx="zoomq.20090728225824.14"># -*- coding: utf-8 -*-
import os,sys,time,datetime,pickle
from operator import itemgetter

from pychartdir import *

from _cfg import *
from fnmatch import *

ADPA = {}
VERSION = "adpanalyzer_v1.4-070629@Zoom.Quiet"

''''adpanalyzer.py'
    v1.4 070629 for large analyzing rep doing...
    v1.3 070615 调整统计输出报表策略，以当日PV排序
    v1.2 070613 调整统计策略 区分对待 推广/广告
    v1.1 070522 追加总PV统计表输出在总历史趋势表中
    v1.0 070522 反转趋势图，为长期的记录作准备
    v0.9 070521 完成历史趋势图输出,并追加每日PV细则
    v0.8 070521 部署到BSD环境中，增加字体指定参数处理
    v0.7 070519 for 乐库SEO广告效益分析创建
    分析每日所有广告位效益，并积累汇报整体变迁趋势图表
    
    ADPA = {"广告位":{"uipcount":Uip总值
                ,"uiplist":[IP1,IP2,...]
                ,"pvcount":PV总值
                ,"pvsong":{"歌曲页面url":pv值}
             }
        ,..}
'''



</t>
<t tx="zoomq.20090728225824.15">def flushHistoric(tpl,exproot,cdrTitle):
    '''更新历史趋势表 乐库合作广告位PV/UIP收益历史趋势图
    '''
    myVer = VERSION
    repTitle = cdrTitle
    creaTime = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    historicDumps = filter(os.listdir(exproot),"*.dump")
    historicDumps.sort(reverse=True)
    adpHistoric = {"historicPV":[],"historicUIP":[],"historicDate":[],}
    
    &lt;&lt;monthlink&gt;&gt;
    &lt;&lt;PVdetail&gt;&gt;
    
    #data0 = [60.2, 51.7, 81.3, 48.6, 56.2, 68.9, 52.8]
    #data1 = [30.0, 32.7, 33.9, 29.5, 32.2, 28.4, 29.8]
    cdrData = [adpHistoric['historicPV'],adpHistoric['historicUIP']]
    labels = adpHistoric['historicDate']
    #["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    
    #print cdrData
    imageMap = chartHistoric(defaultfont
        ,"%s" % cdrTitle
        ,"%s/adphistoric-all.png"%exproot
        ,cdrData
        ,labels
        ,"{value|0}")
        
    open("%s/index.html"%exproot,"w").write(open(tpl).read() % locals())
    #print imageMap
    
    print "%s histroic chart upgradED!" % creaTime


</t>
<t tx="zoomq.20090728225824.16">#zoomq::070611 add month state links
months = []
#dirwalk = os.walk(exproot)
for root, dirs, files in os.walk(exproot, topdown=False):
    #print root,dirs
    if root == exproot:
        for dir in dirs:
            if ".svn" in dir:
                pass
            else:
                months.append(dir)
    else:
        pass
#months = os.listdir(exproot)
print months
monthStatus = ""
for m in months:
    monthStatus += "&lt;a href='%s/index.html'&gt;%s 月度&lt;/a&gt;; " % (m,m)

print monthStatus
#return

</t>
<t tx="zoomq.20090728225824.17">#zoomq::070615 make date as X
pvDetails = ""
pvDetails += "&lt;tr&gt;&lt;td&gt;渠道|pv\日期&lt;/td&gt;"
#for url in adpoints.keys():
for d in historicDumps:
    pvDetails += "&lt;th&gt;%s&lt;/th&gt;" % d[-9:-5]
pvDetails += "&lt;/tr&gt;"

detailTab = {}
for d in historicDumps:
    adpaObj = pickle.load(open("%s/%s" % (exp,d)))
    print adpaObj['totPV'],adpaObj['totUIP']
    ##表格数据
    #pvDetails += "&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;" % d[-11:-5]
    for url in adpoints.keys():
        if url in detailTab.keys():
            pass
        else:
            detailTab[url]=[]
        try:
            #pvDetails += "&lt;td&gt;%s&lt;/td&gt;" % adpaObj[url]["pvcount"]
            detailTab[url].append(adpaObj[url]["pvcount"])
        except:
            #pvDetails += "&lt;td&gt;-&lt;/td&gt;"
            detailTab[url].append(0)
    #pvDetails += "&lt;/tr&gt;"
    #detailTab[url].append("&lt;/tr&gt;")
    ##图表数据
    adpHistoric["historicPV"].append(adpaObj['totPV'])
    adpHistoric["historicUIP"].append(adpaObj['totUIP'])
    adpHistoric["historicDate"].append(d[-11:-5])
#print adpHistoric
#sorted(detailTab.iteritems(), key=itemgetter(1), reverse=True)
for k, v in sorted(detailTab.items()
    , key=lambda x: x[1][0]
    ,reverse=True):
    #print k,v 
    pvDetails += "&lt;tr&gt;&lt;th&gt;&lt;a href='%s'&gt;%s&lt;/a&gt;&lt;/th&gt;" % (k,adpoints[k])
    pvDetails += "".join(["&lt;td&gt;%s&lt;/td&gt;" % i for i in v])
    pvDetails += "&lt;/tr&gt;"

#for adp in  detailTab.keys():


</t>
<t tx="zoomq.20090728225824.18">#zoomq::070522 22:00 追加pv 统计细目
pvDetails = ""
pvDetails += "&lt;tr&gt;&lt;th&gt;|pv\Date&lt;/th&gt;"
for url in adpoints.keys():
    pvDetails += "&lt;th&gt;&lt;a href='%s'&gt;%s&lt;/a&gt;&lt;/th&gt;" % (url,adpoints[url])
pvDetails += "&lt;/tr&gt;"
for d in historicDumps:
    adpaObj = pickle.load(open("%s/%s" % (exp,d)))
    print adpaObj['totPV'],adpaObj['totUIP']
    ##表格数据
    #print adpoints.keys()
    #print adpaObj.keys()
    pvDetails += "&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;" % d[-11:-5]
    for url in adpoints.keys():
        try:
            pvDetails += "&lt;td&gt;%s&lt;/td&gt;" % adpaObj[url]["pvcount"]
        except:
            pvDetails += "&lt;td&gt;-&lt;/td&gt;"
    pvDetails += "&lt;/tr&gt;"
    ##图表数据
    #print d[-11:-5]
    adpHistoric["historicPV"].append(adpaObj['totPV'])
    adpHistoric["historicUIP"].append(adpaObj['totUIP'])
    adpHistoric["historicDate"].append(d[-11:-5])
#print adpHistoric

</t>
<t tx="zoomq.20090728225824.19">def adpAmount(key,count,refer,uip,song):
    '''合算计算累加处理对应广告位信息:
        - key   广告位特征URL
        - count 日志统计数量
        - refer 引用地址
        - uip   用户IP
        - song  目标歌曲
        ADPA[key] = {"uipcount":0,"uiplist":[],"pvcount":0,"pvsong":{}}
    '''
    ## UIP 统计
    if uip in ADPA[key]["uiplist"]:
        pass
    else:
        ADPA[key]["uiplist"].append(uip)
        ADPA[key]["uipcount"]+=1
    ## pv 统计
    ADPA[key]["pvcount"]+= int(count)
    if song in ADPA[key]["pvsong"].keys():
        ADPA[key]["pvsong"][song]+=int(count)
    else:
        ADPA[key]["pvsong"][song] =int(count)


</t>
<t tx="zoomq.20090728225824.20">def adpDaily(logf):
    '''日广告位PV分析
        - in filter log 
            awk '{ print $4,$12,$1,$8,$10 }'
                =&gt; time refer ip url state
            after sort
                =&gt; count time refer ip url state
    '''
    print "adpoint daily analyzing..."
    exp = ""
    log = open(logf).readlines()    
    loop = 20000
    countloop = 0
    print "start analyzed %s PVs"%len(log) 
    for line in log:
        if 0==loop:
            countloop +=1
            print "&gt;&gt;&gt; chked %d * 20k PVs! &lt;&lt;&lt;" % countloop
            loop = 20000
        else:
            loop -=1
        logl = line.split()
        count,refer,uip,song = logl[0],logl[1],logl[2],logl[3]
        #print count,refer,uip,song
        matched = 0
        ## alert kkton not all come from refer
        for key in adpoints.keys():
            if key in refer:
                matched = 1
                if key in ADPA.keys():
                    #print count,refer
                    adpAmount(key,count,refer,uip,song.split("?")[0])
                    #pass
                else:
                    ADPA[key] = {"uipcount":0,"uiplist":[],"pvcount":0,"pvsong":{}}
            else:
                pass
    print "analyzed all %s PV items"%len(log)
    
    '''
        if 0==matched:
            print song,refer
            exp += "%s    %s\n" % (song,refer)
    open("nomatched.log","w").write(exp)
    '''
    return exp


</t>
<t tx="zoomq.20090728225824.21">def drawDailyPie(defaultfont,tonow):
    """每日统计图表输出
    """
    print "draw DailyPie chart for PV/UIP ..."
    totPV = 0
    totUIP = 0
    ### PV图表
    data = []
    labels = []
    for key in ADPA.keys():
        #labels.append(adpoints[key])
        data.append(ADPA[key]["pvcount"])    
        totPV += ADPA[key]["pvcount"]
    data.sort()
    for d in data:
        for key in ADPA.keys():
            if ADPA[key]["pvcount"]==d:
                labels.append(adpoints[key])
                break
            else:
                pass
    chartDadp(defaultfont
        ,"%s 推广合作PV收益分析"%tonow
        ,"%s/yueku-adpv-%s.png"% (exp,tonow)
        ,data
        ,labels
        ,"{label}({percent}%) pv:{value}")
    ### UIP图表
    data=[]
    labels=[]
    for key in ADPA.keys():
        #labels.append(adpoints[key])
        data.append(ADPA[key]["uipcount"])
        totUIP += ADPA[key]["uipcount"]
    data.sort()
    for u in data:
        for key in ADPA.keys():
            if ADPA[key]["uipcount"]==u:
                labels.append(adpoints[key])
                break
            else:
                pass
    chartDadp(defaultfont
        ,"%s 推广合作UIP收益分析"%tonow
        ,"%s/yueku-aduip-%s.png"% (exp,tonow)
        ,data
        ,labels
        ,"{label}({percent}%) {value}人")    
    ADPA['totPV'] = totPV
    ADPA['totUIP'] = totUIP


</t>
<t tx="zoomq.20090728225824.22">def repAll(tpl,exrep,exproot,tonow,repdata=0):
    """HTML报告页面输出函式
    """
    myVer = VERSION
    print "rporting as HTML ..."
    if 0 == repdata:
        #没有直接传入对象,需要从dump文件提取
        dumpf = "%s/yueku-adaily-%s.dump" % (exproot,tonow)
        adpaObj = pickle.load(open(dumpf))
    else:
        adpaObj = repdata
    creaTime = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    repTitle = "乐库推广合作PV/UIP收益分析 %s" % tonow       
    sumPV = adpaObj['totPV']
    sumUIP = adpaObj['totUIP'] 
    
    ## top3 歌曲细则
    print "songDetail into HTML ..."    
    songDetail = ""
    songPVs = []
    pvCount = []
    for adp in adpaObj:
        if ("totUIP"==adp or "totPV"==adp):
            pass
        else:
            pvCount.append(adpaObj[adp]['pvcount'])
    pvCount.sort()
    topSong = pvCount[-10:]
    topSong.reverse()
    print topSong
    for top in topSong:        
        for adp in adpaObj:
            if ("totUIP"==adp or "totPV"==adp):
                pass
            else:
                if top==adpaObj[adp]['pvcount']:
                    #crTopv = []
                    songDetail +="""&lt;td style='vertical-align: top'&gt;
                        &lt;ul&gt;&lt;li&gt;&lt;b&gt;&lt;a href='%s'&gt;%s&lt;/a&gt;&lt;/b&gt;
                        &lt;br/&gt; (总PV:%s)
                        &lt;sup&gt;细目::&lt;/sup&gt;
                            &lt;ul&gt;
                        """% (adp,adpoints[adp],top)
                    #print len(adpaObj[adp]['pvsong'].keys())
                    for k, v in sorted(adpaObj[adp]['pvsong'].items(), key=lambda x: x[1],reverse=True):
                        #print k,v
                        songDetail +="""
                        &lt;li&gt;%s::
                            &lt;a href='http://music.sina.com.cn%s'&gt;%s...&lt;/a&gt;
                            &lt;/li&gt;"""%(v,k,k[:12])
                    #l = sorted(adpaObj[adp]['pvsong'].items(), key=lambda x: x[1],reverse=True)
                    #print len(l)
                    songDetail +="&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;"
    open(exrep,"w").write(open(tpl).read() % locals())
    print "%s all daily analyzing DONE! export dialy analyzeing page " % creaTime


</t>
<t tx="zoomq.20090728225824.23">def chartDadp(defaultfont,cdrTitle,cdrPNG,cdrData,cdrLabels,labelFormat):
    '''利用ChartDirector Ver 4.1 (Python Edition)绘制图表
        - 饼图
    '''
    print "ChartDirector Ver 4.1 drawing %s ..." % cdrTitle
    depths = [3*i for i in range(1,len(cdrData)+1)]
    #xihei = defaultfont     #'/usr/share/fonts/MacFonts/stxihei.ttf'
    # Create a PieChart object of size 560 x 270 pixels, with a golden background and a 1 pixel 3D border
    #c = PieChart(560, 270, goldColor(), -1, 1)
    c = PieChart(480, 400, metalColor(0xccccff, 0), 0x778877, 1)
    c.setRoundedFrame()
    c.setDefaultFonts(defaultfont)
    c.addTitle(cdrTitle,defaultfont, 14).setBackground(0xccccff, 0x000000, glassEffect())
    #.setBackground(metalColor(0xff9999))
    # Set the center of the pie at (280, 135) and the radius to 110 pixels
    c.setPieSize(240, 210, 70)
    #c.set3D(20)
    c.set3D2(depths)
    ## 透明分块
    c.setColors(transparentPalette)
    c.setBackground(goldColor(), 0x334433, 1) #metalColor(0xccccff)
    # Use the side label layout method
    c.setLabelLayout(SideLayout)
    c.setLabelFormat(labelFormat)     #"{label}({percent}%) pv:{value}"
    #t.setBackground(SameAsMainColor, Transparent, glassEffect())
    t = c.setLabelStyle()
    t.setRoundedCorners(5)
    # Set the border color of the sector the same color as the fill color. Set the line
    # color of the join line to black (0x0)
    c.setLineColor(SameAsMainColor, 0x000000)
    c.setStartAngle(135)
    c.setData(cdrData, cdrLabels)
    # output the chart
    c.makeChart(cdrPNG)

</t>
<t tx="zoomq.20090728225824.24">def chartHistoric(defaultfont,cdrTitle,cdrPNG,cdrData,cdrLabels,labelFormat):
    '''利用ChartDirector Ver 4.1 (Python Edition)绘制图表
        - 历史趋势图
    '''
    print "ChartDirector Ver 4.1 drawing %s ..." % cdrTitle
    #depths = [3*i for i in range(1,len(cdrData)+1)]
    # The data for the line chart
    data0 = cdrData[0]  #[60.2, 51.7, 81.3, 48.6, 56.2, 68.9, 52.8]
    data1 = cdrData[1]  #[30.0, 32.7, 33.9, 29.5, 32.2, 28.4, 29.8]
    labels = cdrLabels  #["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    # Create a XYChart object of size 300 x 180 pixels, with a pale yellow (0xffffc0)
    # background, a black border, and 1 pixel 3D border effect.
    cwidth = 100+len(data0)*38
    pwidth = len(data0)*36
    cheight = 100+len(data0)*15
    pheight = len(data0)*15
    #c = XYChart(cwidth,250, 0xffffc0, 0x000000, 1)
    c = XYChart(240,cheight, 0xffffc0, 0x000000, 1)
    c.swapXY()
    c.setYAxisOnRight()
    
    c.setBackground(goldColor(), 0x334433, 1) #metalColor(0xccccff)
    c.setRoundedFrame()
    c.setDefaultFonts(defaultfont)
    # Set the plotarea at (45, 35) and of size 240 x 120 pixels, with white background.
    # Turn on both horizontal and vertical grid lines with light grey color (0xc0c0c0)
    #c.setPlotArea(60, 60, pwidth, 140, 0xffffff, -1, -1, 0xc0c0c0, -1)
    c.setPlotArea(60, 60, 140,pheight, 0xffffff, -1, -1, 0xc0c0c0, -1)
    
    # Add a legend box at (45, 12) (top of the chart) using horizontal layout and 8 pts
    # Arial font Set the background and border color to Transparent.
    c.addLegend(90, 20, 0, "", 8).setBackground(Transparent)
    
    c.addTitle(cdrTitle,defaultfont, 11,0xffffff
        ).setBackground(c.patternColor([0x004000, 0x008000], 2))
    #setBackground(0xccccff, 0x000000, glassEffect())
    # Set the y axis label format to nn%
    c.yAxis().setLabelFormat("{value}")

    # Set the labels on the x axis
    c.xAxis().setLabels(labels)
    #c.xAxis().setLabelStyle(defaultfont, 9, 0x008000).setFontAngle(45)
    c.xAxis().setReverse()
    # Set the axes width to 2 pixels
    c.xAxis().setWidth(2)
    c.yAxis().setWidth(2)
    
    layer = c.addSplineLayer() #addLineLayer()
    layer.setLineWidth(2)
    # Add the first line. Plot the points with a 7 pixel square symbol
    layer.addDataSet(data0, 0xcf4040, "PV").setDataSymbol(CircleSymbol, 9,0xffff00)
    # Add the second line. Plot the points with a 9 pixel dismond symbol
    layer.addDataSet(data1, 0x40cf40, "UIP").setDataSymbol(DiamondSymbol, 9)

    # Enable data label on the data points. Set the label format to nn%.
    #layer.setDataLabelFormat(labelFormat) #"{value|0}"    
    #layer.setDataLabelStyle(defaultfont, 8, 0x334433).setFontAngle(45)
    
    # output the chart
    c.makeChart(cdrPNG)
    ## 输出可点击区域定义
    imageMap = c.getHTMLImageMap("yueku-adaily-{xLabel}.html"
        , ""
        , "title='{xLabel}:: {value|0} '")
    return imageMap
</t>
<t tx="zoomq.20090728225824.25">#!/bin/bash
#
# zoomq::070629 fixed for 131 updated 1st filte 
# zoomq::070523 creat for larget sort in analyzing YueKu apache log
version="zipadplog v0.8-070629"

cmdSudo=$( which sudo)
cmdZcat=$( which zcat)
cmdCat=$( which cat)
cmdEGrep=$( which egrep)
cmdFGrep=$( which fgrep)
cmdGrep=$( which grep)
cmdCut=$( which cut)
cmdAwk=$( which awk)
cmdSed=$( which sed)
#cmdLn=$( which ln)
cmdNl=$( which nl)
cmdUniq=$( which uniq)
cmdSort=$( which sort)
cmdPython=$( which python)

#logroot="/data0/mupopro/logs/music_sina_com_cn/$today"
#statsroot="/data0/mupopro/logs/searchKeyAnalyzer"
#yseoRoot="%(yseoRoot)s"

echo "$version ::auto zip YueKu runing 'analyzed' log for yseo6..."

echo "hold enter var::$1"

# 4 analyz Chart as ...
#    egrep -v " http://music.sina.com.cn/yueku" | \
$cmdCat $1 | \
    $cmdEGrep -v "sms" | \
    $cmdEGrep -v " /yueku/playlog.php" | \
    $cmdEGrep -v " /yueku/port/" | \
    $cmdEGrep -v " /iframe/yueku/" | \
    $cmdEGrep -v " /yueku/rank/" | \
    $cmdEGrep -v " /yueku/search/" | \
    $cmdEGrep -v " /yueku/UC" | \
    $cmdEGrep -v " - " | \
    $cmdSort -bdi -k 1 | \
    $cmdUniq -c | $cmdSort -gr &gt; ziped-$1

#    egrep -v ".swf" | \
#    egrep -v " /yueku/playlist.php" | \
#    egrep -v " /yueku/port/" | \
#    egrep -v " /iframe/yueku/" | \
#    egrep -v " /yueku/drm.php" | \
#    egrep -v " /yueku/rank/" | \
#    egrep -v " /yueku/search/" | \
#    egrep -v " /yueku/UC070406.html" | \
#    egrep -v " /yueku/playlog.php" | \

echo "$version ::i done all! pls going Python script export report HTML page..."

echo
exit  0

</t>
<t tx="zoomq.20090728225824.26">070601-ad-wc.txt
</t>
<t tx="zoomq.20090728225824.27">@path adpvstats/yseo6/
</t>
<t tx="zoomq.20090728225824.28">#tpl for creat shell for analyze one by one log files
running for filter all need data:
awk '{ print $4,$12,$1,$8,$10 }'

[11/Jun/2007:00:07:53 "http://chat.sina.com.cn/homepage/6/2007/0406/17.html" 221.224.59.38 /yueku/UC070406.html 304

base time not need uniq:
    
    | $cmdUniq -c | $cmdSort -gr
    cancel
    
    $cmdSort -bdi -k 1 -o %(exportPath)s/adP%(datePoint)s_%(historicHost)s.sort
</t>
<t tx="zoomq.20090728225824.29">#!/bin/bash

## zoomq::070628 merge all CASE for ykstate upgrade
## zoomq::070612 append kktone support
## zoomq::070523 creat for larget sort in analyzing YueKu apache log

version="yseo6_adpanalyzer v1.0 070628"

cmdSudo=$( which sudo)
cmdZcat=$( which zcat)
cmdEGrep=$( which egrep)
cmdFGrep=$( which fgrep)
cmdGrep=$( which grep)
cmdCut=$( which cut)
cmdAwk=$( which awk)
cmdSed=$( which sed)
#cmdLn=$( which ln)
cmdNl=$( which nl)
cmdUniq=$( which uniq)
cmdSort=$( which sort)
cmdPython=$( which python)

#logroot="/data0/mupopro/logs/music_sina_com_cn/$today"
#statsroot="/data0/mupopro/logs/searchKeyAnalyzer"
#yseoRoot="%(yseoRoot)s"

echo "$version ::auto STATS YueKu runing log for yseo6..."

%(ShellFitler)s

echo "OK i will merger all sort tmp files :: \n\n %(SortedFiles)s \n\nand sort and uniq for Python analzying ..."
%(SortedMerg)s

echo "$version ::i done all!\n\n pls going Python script export report HTML page..."

echo
exit  0

</t>
<t tx="zoomq.20090728225824.30">echo "try to filting the %(historicLog)s and sort into tmp file..."
echo 
echo "base PV filting:egrep -v '(.js|.css|.ico|.swf|.png|.PNG|.bmp|.gif|.GIF|.jpg|.JPG|dpool_check.php|/collect/collectsong.php|drm.php|playlist.php|/list/iaskplaylist.php|/new/index.html|main.html|copy.html|head.html|head_tc.html|/119/2007/0521/1.html|chat.sina.com.cn|/shequ/port/|/shequ/ssi/|/shequ/tpl/)'cut most kinds of invalidity PV"
echo
$cmdZcat %(logBasePath)s/%(datePoint)s/%(historicLog)s | \
    $cmdAwk '{ print $4,$12,$1,$8,$10 }' | \
    $cmdSed 's/\"//g' | \
    $cmdEGrep -v "(.js|.css|.ico|.swf|.png|.PNG|.bmp|.gif|.GIF|.jpg|.JPG|dpool_check.php|/collect/collectlist.php|/collect/collectsong.php|drm.php|playlist.php|/list/iaskplaylist.php|/new/index.html|main.html|copy.html|head.html|head_tc.html|/119/2007/0521/1.html|chat.sina.com.cn|/shequ/port/|/shequ/ssi/|/shequ/tpl/)" &gt; %(exportPath)s/adP%(datePoint)s_%(historicHost)s.sort
</t>
<t tx="zoomq.20090728225824.31">$cmdSort -sm %(SortedFiles)s &gt; %(exportPath)s/adPoint%(datePoint)s.log

</t>
<t tx="zoomq.20090728225824.32"># -*- coding: utf-8 -*-

''''yseo6_adpLogShell.py'
    v0.8 070524 完成并部署运行
    v0.7 070523 为提高日志分析的效率，使用py 生成对应shell 脚本再运行!
'''
import os,sys,time,datetime
from fnmatch import *

VERSION = "yseo6_adpLogShell v0.8_070524"

if __name__ == '__main__':      # this way the module can be
    if 4 != len(sys.argv):
        print """yseo6_adpLogShell.py usage::
        $ python yseo6_adpLogShell.py logBasePath datePoint exportPath
        """
    else:
        logBasePath = sys.argv[1]
        datePoint = sys.argv[2]
        exportPath = sys.argv[3]

        #yseoRoot = "/home/zoomq/workspace/mu_tangle_ZoomQuiet/YKSEO/olink_ad_point"
        yseoRoot = "/home/zoomq/run_yueku_logs" # for running 70-59
        
        historicLogs = filter(os.listdir("%s/%s"%(logBasePath,datePoint)),"*.gz")
        #print historicLogs
        ShellFitler = ""
        SortedFiles = ""
        for h in historicLogs:
            historicLog = h
            historicHost = h[-10:-6]
            ShellFitler += "\n\n"+open('yseo6_adpanalyzer.filter.tpl').read() % locals()
            SortedFiles += " '%(exportPath)s/adP%(datePoint)s_%(historicHost)s.sort'" % locals()

        SortedMerg = "\n\n"+open('yseo6_adpanalyzer.sort.tpl').read() % locals()
        #print SortedMerg
        
        open("yseo6_adpanalyzer_%s.sh"%datePoint,"w"
            ).write(open("yseo6_adpanalyzer.sh.tpl").read() % locals())
    print "done! u can runing the yseo6_adpanalyzer_*.sh to do all next..."


</t>
<t tx="zoomq.20090728225824.33">@path adpvstats/pvlosting/
</t>
<t tx="zoomq.20090728225824.34">&lt;&lt; declarations &gt;&gt;

@others

if __name__ == '__main__':      # this way the module can be
    logpath = "../runYueKuReports"
    armpath = "pvlosting"
    klost = flushHisAll(logpath,armpath)
    clost = flushHisCnt(logpath,armpath)
    mergeKey(klost,clost)
    print "Mnnnn export all that report!!!!"
    
</t>
<t tx="zoomq.20090728225824.35"># -*- coding: utf-8 -*-
import os,sys,time,datetime,pickle
#from pychartdir import *
#from _cfg import *
from fnmatch import *

ADPA = {}
VERSION = "urgencyAnalyzer v0.8 070612"


</t>
<t tx="zoomq.20090728225824.36">def mergeKey(klost,clost):
    '''070612 紧急分析PV流失关键问题
    '''
    myVer = VERSION
    creaTime = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    
    yester = klost['070611']['html']+clost['070611']['html']
    layester = klost['070610']['html']+clost['070610']['html']
    llyester = klost['070609']['html']+clost['070609']['html']
    
    open('urgencylosted.html'
        ,"w").write(open('urgency-analyze.tpl').read() % locals())
    print 'urgencylosted.html exported!'



</t>
<t tx="zoomq.20090728225824.37">def flushHisCnt(logpath,armpath):
    '''070612 紧急分析内容页面趋势
    '''
    pvcount = {
        '070609':{"html":""
            ,"yueku.a":0,"yueku.v":0,"yueku.m":0,"yueku.s":0,"yueku.root":0}
        ,'070610':{"html":""
            ,"yueku.a":0,"yueku.v":0,"yueku.m":0,"yueku.s":0,"yueku.root":0}
        ,'070611':{"html":""
            ,"yueku.a":0,"yueku.v":0,"yueku.m":0,"yueku.s":0,"yueku.root":0}
        }
    myVer = VERSION
    creaTime = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    #historicDumps.sort(reverse=True)
    historicTotle = filter(os.listdir(logpath),"*.pvt")
    &lt;&lt;countPV&gt;&gt;
    
    historicSort = filter(os.listdir(logpath),"*.sortc")
    yester = ""
    layester = ""
    llyester = ""
    for sortf in historicSort:
        print "doing %s..." % sortf
        for day in pvcount.keys():
            if day in sortf:
                #print open("%s/%s"%(exproot,sort) ).readlines(3)
                &lt;&lt;expHTML&gt;&gt;
    yester = pvcount['070611']['html']
    layester = pvcount['070610']['html']
    llyester = pvcount['070609']['html']
    
    #open('urgencylostingc.html'
    #    ,"w").write(open('urgency-analyze.tpl').read() % locals())
    print '%s/urgencycontent.html exported!'% armpath 
    return pvcount



</t>
<t tx="zoomq.20090728225824.38">for tot in historicTotle:
    print tot
    for day in pvcount.keys():
        if day in tot:
            for type in pvcount[day].keys():
                if type in tot:
                    totle = open("%s/%s"%(logpath,tot)).read()
                    print "totle PV::%s" % totle
                    pvcount[day][type] = totle
print pvcount

</t>
<t tx="zoomq.20090728225824.39">pvcount[day]['html'] += '''&lt;tr style='background-color:#dedede'&gt;
    &lt;th&gt; PV &lt;/th&gt; 
    &lt;th&gt;url &lt;sup&gt;refer&lt;/sup&gt;&lt;/tr&gt;'''

lines = open("%s/%s"%(logpath,sortf) ).readlines()
#totle = len(lines)

for kpath in pvcount[day].keys():
    if kpath in sortf:
        #pvcount[day][kpath] = totle
        pvcount[day]['html'] += """&lt;tr style='background-color:#ffffff'&gt;
        &lt;td&gt;&lt;i&gt; top5 &lt;/i&gt;&lt;/td&gt;
        &lt;td&gt;&lt;b&gt; /%s 总计:: %s &lt;/th&gt;&lt;/b&gt;
        &lt;/tr&gt;"""%(sortf[6:-6].replace(".","/"),pvcount[day][kpath])

#print pvcount[day]['html']

for line in lines[:10]:
    ele = line.split()
    try:
        pvcount[day]['html'] += '''&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;
            &lt;td width='300'&gt;&lt;a href='http://music.sina.com.cn%s'&gt;%s...&lt;/a&gt; 
            &lt;sup&gt;&lt;a href='%s'&gt;..%s&lt;/a&gt;&lt;/sup&gt;
            &lt;/td&gt;&lt;/tr&gt;''' % (
                ele[0],ele[1],ele[1][:12]
                ,ele[2],ele[2][-12:])
    except:
        pvcount[day]['html'] += '''&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;
            &lt;td width='300'&gt;&lt;a href='http://music.sina.com.cn%s'&gt;%s...&lt;/a&gt;
            &lt;/td&gt;&lt;/tr&gt;''' % (ele[0],ele[1],ele[1][:12])



</t>
<t tx="zoomq.20090728225824.40">def flushHisAll(logpath,armpath):
    '''070612 紧急分析
    '''
    #timekey = {'070609':"",'070610':"",'070611':""}
    pvcount = {
        '070609':{"html":""
            ,"m.php":0,"yueku.m":0,"keypages":0}
        ,'070610':{"html":""
            ,"m.php":0,"yueku.m":0,"keypages":0}
        ,'070611':{"html":""
            ,"m.php":0,"yueku.m":0,"keypages":0}
            }
    myVer = VERSION
    creaTime = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    #historicDumps.sort(reverse=True)
    historicCount = filter(os.listdir(logpath),"*.txt")
    &lt;&lt;countPV&gt;&gt;
    historicDumps = filter(os.listdir(logpath),"*.sort")
    yester = ""
    layester = ""
    llyester = ""
    print  historicDumps
    for sort in historicDumps:
        for day in pvcount.keys():
            if day in sort:
                #print open("%s/%s"%(exproot,sort) ).readlines(3)
                &lt;&lt;expHTML&gt;&gt;
                
            else:
                pass
    yester = pvcount['070611']['html']
    layester = pvcount['070610']['html']
    llyester = pvcount['070609']['html']
    
    #open('urgencylosting.html'
    #    ,"w").write(open('urgency-analyze.tpl').read() % locals())
    print '%s/urgencyanalyze.html exported!'% armpath 
    return pvcount




</t>
<t tx="zoomq.20090728225824.41">for c in historicCount:
    print c
    for day in pvcount.keys():
        if day in c:
            for type in pvcount[day].keys():
                if type in c:
                    pvcount[day][type] = open("%s/%s"%(logpath,c)).read()
        else:
            # not time march
            pass

print pvcount

</t>
<t tx="zoomq.20090728225824.42">lines = open("%s/%s"%(logpath,sort) ).readlines()[:10]
#print "".join(["&lt;tr&gt;&lt;td&gt;%s %s&lt;/td&gt;&lt;/tr&gt;"%(line.split()[0],line.split()[1])  for line in lines[3] ] )

pvcount[day]['html'] += "&lt;tr style='background-color:#dedede'&gt;&lt;th&gt; PV &lt;/th&gt; &lt;th&gt;url &lt;sup&gt;refer&lt;/sup&gt;&lt;/tr&gt;&lt;/tr&gt;"

for type in pvcount[day].keys():
    if type in sort:
        pvcount[day]['html'] += "&lt;tr style='background-color:#ffffff'&gt;&lt;td&gt;&lt;b&gt; %s &lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;总计 %s &lt;/th&gt;&lt;/b&gt;&lt;/tr&gt;"%(pvcount[day][type],sort[:-5])
for line in lines:
    ele = line.split()
    if 2&lt;len(ele):
        pvcount[day]['html'] += """&lt;tr&gt;
            &lt;td&gt;%s&lt;/td&gt;&lt;td width='300'&gt;
                &lt;a href='http://music.sina.com.cn%s'&gt;%s...&lt;/a&gt;
                &lt;sup&gt;&lt;a href='%s'&gt;%s&lt;/a&gt;...&lt;sup&gt;
            &lt;/td&gt;&lt;/tr&gt;""" % (
                ele[0],ele[1],ele[1][:12]
                ,ele[2],ele[2][-12:])
    else:
        pvcount[day]['html'] += """&lt;tr&gt;
            &lt;td&gt;%s&lt;/td&gt;&lt;td width='300'&gt;&lt;a href='http://music.sina.com.cn%s'&gt;%s...&lt;/a&gt;
            &lt;/td&gt;&lt;/tr&gt;""" % (
                ele[0],ele[1],ele[1][:12]
                )


</t>
<t tx="zoomq.20090728225824.43">@path adpvstats/play50top/
</t>
<t tx="zoomq.20090728225824.44">&lt;&lt; declarations &gt;&gt;
VERSION = "urgencyToPlay v0.7 070622"

@others

if __name__ == '__main__':      # this way the module can be
    logpath = "../runYueKuReports"
    armpath = logpath #"pvlosting"
    &lt;&lt;abtDB&gt;&gt;
    flushHisPlay(logpath,armpath)
    
    print "Mnnnn export all that report!!!!"
    
</t>
<t tx="zoomq.20090728225824.45"># -*- coding: utf-8 -*-
import os,sys,time,datetime,pickle
#from pychartdir import *
#from _cfg import *
from fnmatch import *
import adodb




</t>
<t tx="zoomq.20090728225824.46">
dbhost = "10.210.70.62" #"10.210.70.57"#"localhost"
dbname = "MusicLibrary"
dbuser = "zoomq"
dbpasswd = "ykse01q2w3e"
conn = adodb.NewADOConnection('mysql')
#print self.conn
#conn.Connect('server', 'user', 'pwd', 'db')
conn.Connect(dbhost
    ,dbuser
    ,dbpasswd
    ,dbname)
# for unicode read
conn.Execute("set names 'utf8' ;")

sql = "SELECT Name FROM `Song` WHERE SongID=%s ;"


</t>
<t tx="zoomq.20090728225824.47">def flushHisPlay(logpath,armpath):
    '''070612 紧急分析,play top 50
    '''
    myVer = VERSION
    creaTime = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    bgMark = 989998
    
    logMark = "*-play-top50.txt"
    repTpl = 'toplay.tpl'
    expRep = "%s/urgencyToPlay.html"%armpath
    urlSong = "http://music.sina.com.cn/yueku/m/%s.html"
    listTpl = """&lt;th style='vertical-align: top;background-color:#%(bgMark)s;'&gt;
%(today)s &lt;br/&gt;
&lt;table id="pvDetails"&gt;&lt;tr&gt;
&lt;th&gt;#&lt;/th&gt;&lt;td&gt;times&lt;/td&gt;&lt;td&gt;song&lt;/td&gt;
&lt;/tr&gt;
%(toplays)s
&lt;/table&gt;&lt;/th&gt;
    """
    playTpl = """&lt;tr&gt;
&lt;th&gt;%s&lt;/th&gt;&lt;td&gt;%s&lt;/td&gt;
&lt;td&gt;&lt;a href='http://music.sina.com.cn/yueku/m/%s.html'&gt;%s&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
    """
    #historicDumps.sort(reverse=True)
    historicCount = filter(os.listdir(logpath),logMark)

    &lt;&lt;countPV&gt;&gt;

    open(expRep,"w").write(open(repTpl).read() % locals())

    print '%s/%s exported!'% (armpath ,expRep)
    #return pvcount




</t>
<t tx="zoomq.20090728225824.48">print historicCount
#log = "%s/%s" % (logpath,historicCount[0])

daytoplays = ""
colorseed = 9
for logf in historicCount:
    log = "%s/%s" % (logpath,logf)
    today = logf[:4]
    order = 0    
    toplays = ""
    for p in open(log).readlines():
        order +=1
        #print sql % p.split()[1]
        #print conn.GetOne(sql % p.split()[1])
        toplays += playTpl % (order
            ,p.split()[0]
            ,p.split()[1]
            ,conn.GetOne(sql % p.split()[1]))
    #bgMark = ("%sf"%colorseed)*3
    daytoplays +=listTpl % locals()
    bgMark -= 111
    print bgMark
    print "rep DONE 4 logf"

    
'''
for c in historicCount:
    print c
    for day in pvcount.keys():
        if day in c:
            for type in pvcount[day].keys():
                if type in c:
                    pvcount[day][type] = open("%s/%s"%(logpath,c)).read()
        else:
            # not time march
            pass

print pvcount
'''

</t>
<t tx="zoomq.20090728225824.49">lines = open("%s/%s"%(logpath,sort) ).readlines()[:10]
#print "".join(["&lt;tr&gt;&lt;td&gt;%s %s&lt;/td&gt;&lt;/tr&gt;"%(line.split()[0],line.split()[1])  for line in lines[3] ] )

pvcount[day]['html'] += "&lt;tr style='background-color:#dedede'&gt;&lt;th&gt; PV &lt;/th&gt; &lt;th&gt;url &lt;sup&gt;refer&lt;/sup&gt;&lt;/tr&gt;&lt;/tr&gt;"

for type in pvcount[day].keys():
    if type in sort:
        pvcount[day]['html'] += "&lt;tr style='background-color:#ffffff'&gt;&lt;td&gt;&lt;b&gt; %s &lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;总计 %s &lt;/th&gt;&lt;/b&gt;&lt;/tr&gt;"%(pvcount[day][type],sort[:-5])
for line in lines:
    ele = line.split()
    if 2&lt;len(ele):
        pvcount[day]['html'] += """&lt;tr&gt;
            &lt;td&gt;%s&lt;/td&gt;&lt;td width='300'&gt;
                &lt;a href='http://music.sina.com.cn%s'&gt;%s...&lt;/a&gt;
                &lt;sup&gt;&lt;a href='%s'&gt;%s&lt;/a&gt;...&lt;sup&gt;
            &lt;/td&gt;&lt;/tr&gt;""" % (
                ele[0],ele[1],ele[1][:12]
                ,ele[2],ele[2][-12:])
    else:
        pvcount[day]['html'] += """&lt;tr&gt;
            &lt;td&gt;%s&lt;/td&gt;&lt;td width='300'&gt;&lt;a href='http://music.sina.com.cn%s'&gt;%s...&lt;/a&gt;
            &lt;/td&gt;&lt;/tr&gt;""" % (
                ele[0],ele[1],ele[1][:12]
                )


</t>
<t tx="zoomq.20090728225824.50">@path adpvstats/070703pvuip/
</t>
<t tx="zoomq.20090728225824.51">&lt;&lt; declarations &gt;&gt;
VERSION = "urgencyUIPV v0.7 070703"

@others

if __name__ == '__main__':      # this way the module can be
    logpath = "../runYueKuReports"
    armpath = logpath #"pvlosting"
    #flushHisPlay(logpath,armpath)
    days=["0629","0630","0701","0702",]
    uipv={'totPV':[3030198,3261248,3413675,2842273],
        'totUIP':[410810,488240,485488,555542],
        'totHome':[73444,60153,62096,76780],
        'kktphp':[159785,190842,193310,130479],
        'kktcnt':[72018,86518,86875,59446],   
        'singer':[33240,41134,39718,39471],
        'ent.sina':[130803,165295,156669,401514],
        }
        
    chartHisPV(sys.argv[1]
        ,"070703 PV波动分析"
        ,"pv-070703.png"
        ,uipv
        ,days
        ,"{value|0}"
        )
    
    chartHisUIP(sys.argv[1]
        ,"070703 UIP波动分析"
        ,"uip-070703.png"
        ,uipv
        ,days
        ,"{value|0}"
        )
    print "Mnnnn export all that report!!!!"


    
</t>
<t tx="zoomq.20090728225824.52"># -*- coding: utf-8 -*-
import os,sys,time,datetime,pickle

from pychartdir import *
#from _cfg import *
from fnmatch import *
#import adodb




</t>
<t tx="zoomq.20090728225824.53">
dbhost = "10.210.70.62" #"10.210.70.57"#"localhost"
dbname = "MusicLibrary"
dbuser = "zoomq"
dbpasswd = "ykse01q2w3e"
conn = adodb.NewADOConnection('mysql')
#print self.conn
#conn.Connect('server', 'user', 'pwd', 'db')
conn.Connect(dbhost
    ,dbuser
    ,dbpasswd
    ,dbname)
# for unicode read
conn.Execute("set names 'utf8' ;")

sql = "SELECT Name FROM `Song` WHERE SongID=%s ;"


</t>
<t tx="zoomq.20090728225824.54">def chartHisPV(defaultfont,cdrTitle,cdrPNG,cdrData,cdrLabels,labelFormat):
    '''利用ChartDirector Ver 4.1 (Python Edition)绘制图表
        - 历史趋势图
    '''
    print "ChartDirector Ver 4.1 drawing %s ..." % cdrTitle
    dataPV = [scaled(i,10000.0) for i in uipv['totPV']]
    dataUIP = [scaled(i) for i in uipv['totUIP']] #uipv['totUIP']
    print dataUIP
    dataHome = [scaled(i) for i in uipv['totHome']] 
    dataKKT = [scaled(i) for i in uipv['kktphp']] 
    dataKKC = [scaled(i) for i in uipv['kktcnt']]
    dataS = [scaled(i) for i in uipv['singer']]
    labels = cdrLabels  #["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    #c.swapXY()
    cwidth = 120+len(labels)*80
    pwidth = len(labels)*80
    c = XYChart(cwidth,260, 0xffffc0, 0x000000, 1)
    #c.setPlotArea(60,40, pwidth,140, 0xffffff, -1, -1, 0xc0c0c0, -1)
    c.setPlotArea(60,60, pwidth,160, 0xffffff, 0xeeeeee)
    #c.setYAxisOnRight()
    c.setBackground(goldColor(), 0x334433, 1) #metalColor(0xccccff)
    
    c.setRoundedFrame()
    c.setDefaultFonts(defaultfont)
    
    c.addLegend(15, 15, 0, "", 8).setBackground(Transparent)
    
    c.addTitle(cdrTitle,defaultfont, 11,0xffffff
        ).setBackground(c.patternColor([0x004000, 0x008000], 2))
    #setBackground(0xccccff, 0x000000, glassEffect())
    # Set the y axis label format to nn%
    c.yAxis().setLabelFormat("{value}")
    # Set the labels on the x axis
    c.xAxis().setLabels(labels)#.setFontAngle(45)
    #c.xAxis().setLabelStyle(defaultfont, 9, 0x008000).setFontAngle(45)
    #c.xAxis().setReverse()
    # Set the axes width to 2 pixels
    c.xAxis().setWidth(1)
    c.yAxis().setWidth(2)
    
    layer = c.addSplineLayer() #addLineLayer()
    layer.setLineWidth(2)
    layer.setDataLabelFormat("{value}")
    #c.addAreaLayer(dataKKT, 
    #    c.linearGradientColor(0, 50, 0, 255, 0x80ff0000L, 0x80ffffffL))
    layer.addDataSet(dataKKT, 0xaabb00
        , "kktone.php(千pv)").setDataSymbol(TriangleSymbol, 9,0x40cf40)
    layer.addDataSet(dataKKC, 0x00aabb
        , "C_kktone.html(千pv)").setDataSymbol(RightTriangleSymbol, 9)
    layer.addDataSet(dataPV, 0x993300, "总PV(万pv)").setDataSymbol(SquareSymbol, 8)
    
    #layer.addDataSet(dataUIP, 0x334433, "UIP").setDataSymbol(DiamondSymbol, 9)
    layer.addDataSet(dataHome, 0x003399, "Home(千pv)").setDataSymbol(CircleSymbol, 9)
    #layer.addDataSet(dataS, 0x40cf40, "/yueku/s/").setDataSymbol(PolygonShape(5), 9)
    
    

    # output the chart
    c.makeChart(cdrPNG)



</t>
<t tx="zoomq.20090728225824.55">def chartHisUIP(defaultfont,cdrTitle,cdrPNG,cdrData,cdrLabels,labelFormat):
    '''利用ChartDirector Ver 4.1 (Python Edition)绘制图表
        - 历史趋势图
    '''
    print "ChartDirector Ver 4.1 drawing %s ..." % cdrTitle
    dataPV = [scaled(i,10000.0) for i in uipv['totPV']]
    dataUIP = [scaled(i) for i in uipv['totUIP']] #uipv['totUIP']
    print dataUIP
    dataHome = [scaled(i) for i in uipv['totHome']] 
    dataKKT = [scaled(i) for i in uipv['kktphp']] 
    dataKKC = [scaled(i) for i in uipv['kktcnt']]
    dataS = [scaled(i) for i in uipv['singer']]
    dataEnt = [scaled(i) for i in uipv['ent.sina']]
    labels = cdrLabels  #["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    #c.swapXY()
    cwidth = 120+len(labels)*80
    pwidth = len(labels)*80
    c = XYChart(cwidth,260, 0xffffc0, 0x000000, 1)
    #c.setPlotArea(60,40, pwidth,140, 0xffffff, -1, -1, 0xc0c0c0, -1)
    c.setPlotArea(60,60, pwidth,160, 0xffffff, 0xeeeeee)
    #c.setYAxisOnRight()
    c.setBackground(goldColor(), 0x334433, 1) #metalColor(0xccccff)
    
    c.setRoundedFrame()
    c.setDefaultFonts(defaultfont)
    
    c.addLegend(15, 15, 0, "", 8).setBackground(Transparent)
    
    c.addTitle(cdrTitle,defaultfont, 11,0xffffff
        ).setBackground(c.patternColor([0x004000, 0x008000], 2))
    #setBackground(0xccccff, 0x000000, glassEffect())
    # Set the y axis label format to nn%
    c.yAxis().setLabelFormat("{value}")
    # Set the labels on the x axis
    c.xAxis().setLabels(labels)#.setFontAngle(45)
    #c.xAxis().setLabelStyle(defaultfont, 9, 0x008000).setFontAngle(45)
    #c.xAxis().setReverse()
    # Set the axes width to 2 pixels
    c.xAxis().setWidth(1)
    c.yAxis().setWidth(2)
    
    layer = c.addSplineLayer() #addLineLayer()
    layer.setLineWidth(2)
    layer.setDataLabelFormat("{value}")#{value|0}
    #c.addAreaLayer(dataKKT, 
    #    c.linearGradientColor(0, 50, 0, 255, 0x80ff0000L, 0x80ffffffL))
    #layer.addDataSet(dataKKT, 0xaabb00
    #    , "kktone.php(千pv)").setDataSymbol(TriangleSymbol, 9,0x40cf40)
    #layer.addDataSet(dataKKC, 0x00aabb
    #    , "C_kktone.html(千pv)").setDataSymbol(RightTriangleSymbol, 9)
    #layer.addDataSet(dataPV, 0x993300, "总PV(万pv)").setDataSymbol(SquareSymbol, 8)
    
    layer.addDataSet(dataUIP, 0x334433, "UIP(千IP)").setDataSymbol(DiamondSymbol, 9)
    layer.addDataSet(dataHome, 0x003399
        , "Home(千PV)").setDataSymbol(CircleSymbol, 9)    
    
    layer.addDataSet(dataEnt, 0x40cf40
        , "来自ent(千PV)").setDataSymbol(PolygonShape(5), 9)
    
    #layer.addDataSet(dataS, 0x40cf40
    #    , "/yueku/s/(千PV)").setDataSymbol(PolygonShape(5), 9)
    
    

    # output the chart
    c.makeChart(cdrPNG)



</t>
<t tx="zoomq.20090728225824.56">def scaled(data,smark=1000.0):
    '''按比例处理数值
    '''
    #print data,smark
    print "%.2f"%(data/smark)
    dstr = "%.2f"%(data/smark)
    
    return dstr+""</t>
<t tx="zoomq.20090728225824.57">&lt;&lt; declarations &gt;&gt;
''''ad10song.py'...
    v0.7 070628 for 0706 10首歌 广告播放统计
    v0.8 070706 for 0707 10首歌 广告播放统计
: 070706 Running@61:
```
$ zcat runYueKuLogs/070701/*.cn.gz | awk '{ print $8 }' | fgrep "ad-" | tee ykstate/adplayed/070701-ad.log | wc -l &gt; ykstate/adplayed/070701-ad-wc.txt &amp;
```
'''
VERSION = "ad10song.py v0.8-070706@Zoom.Quiet"

@others

if __name__ == '__main__':      # this way the module can be
    if 3 != len(sys.argv):
        print """ %s usage::
        $ python ad10song.py 'path/to/chinese.font.ttf' monthPoint [like 0707]
        """ % VERSION
    else:
        defaultfont = sys.argv[1]           #[-10:-4]    print tonow
        crtMonth = sys.argv[2]                 #[-10:-4]    print tonow
        print "tyr to analyzing and chart month ad playing "
        exp = "repadp"         #/home/zoomq/workspace/mu_tangle_ZoomQuiet/YKSEO/    
        #dailyTpl = 'adp_dailyrep.tpl'
        historicTpl = 'adp_historic.tpl'
        flushHistoric(historicTpl,exp,"`乐库十首歌`广告播放统计",crtMonth)
        
    print "Mnnnn export all that report!!!!"


</t>
<t tx="zoomq.20090728225824.58"># -*- coding: utf-8 -*-
import os,sys,time,datetime,pickle
from operator import itemgetter

from pychartdir import *

from fnmatch import *



</t>
<t tx="zoomq.20090728225824.59">def flushHistoric(tpl,exproot,cdrTitle,crtMonth):
    '''更新历史趋势表 乐库合作广告位PV/UIP收益历史趋势图
    '''
    myVer = VERSION
    dataPath = "adplayed"
    repTitle = cdrTitle
    creaTime = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    historicDumps = filter(os.listdir(dataPath),"%s*-ad-wc.txt"%crtMonth)
    historicDumps.sort(reverse=True)
    #historicDumps.sort()
    print historicDumps
    dDumped = flushDumps(dataPath,crtMonth)
    adplay = dDumped[0]
    addate = dDumped[1]
    ptDetails = detailsADPlay(addate,adplay)
    
    labels = addate
    #print cdrData
    imageMap = chartHistoric(defaultfont
        ,"%s" % cdrTitle
        ,"%s/adplayed-%s.png"%(exproot,crtMonth)
        ,adplay
        ,labels
        ,"{value|0}")
       
    
    
    open("index.html","w").write(open(tpl).read() % locals())
    #print imageMap
    
    print "%s histroic chart upgradED!" % creaTime


</t>
<t tx="zoomq.20090728225824.60">for his in historicDumps:
    adplay.append(open("%s/%s"%(dataPath,his)).read())
    addate.append(his[:6])

print addate
</t>
<t tx="zoomq.20090728225824.61">ptDetails="&lt;tr&gt;&lt;th&gt;日期&lt;/th&gt;&lt;th&gt;播放&lt;/th&gt;&lt;/tr&gt;"


for i in range(len(addate),0,-1):
    ptDetails +="&lt;tr&gt;"
    ptDetails +="&lt;td&gt;%s&lt;/td&gt;"% addate[i-1]
    ptDetails +="&lt;td&gt;%s&lt;/td&gt;"% adplay[i-1]
    ptDetails += "&lt;/tr&gt;"







</t>
<t tx="zoomq.20090728225824.62">def flushDumps(dataPath,crtMonth):
    '''scaning dir export data list
    '''
    historicDumps = filter(os.listdir(dataPath),"%s*-ad-wc.txt"%crtMonth)
    historicDumps.sort(reverse=True)
    #historicDumps.sort()
    print historicDumps
    
    adplay = []
    addate = []
    for his in historicDumps:
        adplay.append(open("%s/%s"%(dataPath,his)).read())
        addate.append(his[:6])

    return (adplay,addate)

</t>
<t tx="zoomq.20090728225824.63">def detailsADPlay(addate,adplay):
    '''export TAB of ad10 details info.
    '''
    ptDetails="&lt;tr&gt;&lt;th&gt;日期&lt;/th&gt;&lt;th&gt;播放&lt;/th&gt;&lt;/tr&gt;"
    for i in range(len(addate),0,-1):
        ptDetails +="&lt;tr&gt;"
        ptDetails +="&lt;td&gt;%s&lt;/td&gt;"% addate[i-1]
        ptDetails +="&lt;td&gt;%s&lt;/td&gt;"% adplay[i-1]
        ptDetails += "&lt;/tr&gt;"
    return ptDetails


</t>
<t tx="zoomq.20090728225824.64">def chartHistoric(defaultfont,cdrTitle,cdrPNG,cdrData,cdrLabels,labelFormat):
    '''利用ChartDirector Ver 4.1 (Python Edition)绘制图表
        - 历史趋势图
    '''
    print "ChartDirector Ver 4.1 drawing %s ..." % cdrTitle
    data0 = cdrData
    labels = cdrLabels  #["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    cheight = 100+len(labels)*15
    pheight = len(labels)*15
    c = XYChart(240,cheight, 0xffffc0, 0x000000, 1)
    c.setPlotArea(60, 60, 140,pheight, 0xffffff, -1, -1, 0xc0c0c0, -1)
    c.swapXY()
    #cwidth = 100+len(labels)*36
    #pwidth = len(labels)*36
    #c = XYChart(cwidth,240, 0xffffc0, 0x000000, 1)
    #c.setPlotArea(60,40, pwidth,140, 0xffffff, -1, -1, 0xc0c0c0, -1)
    #c.setPlotArea(60,40, pwidth,140, 0xffffff, 0xeeeeee)
    #c.setYAxisOnRight()
    c.setBackground(goldColor(), 0x334433, 1) #metalColor(0xccccff)
    
    c.setRoundedFrame()
    c.setDefaultFonts(defaultfont)
    
    c.addLegend(90, 15, 0, "", 8).setBackground(Transparent)
    
    c.addTitle(cdrTitle,defaultfont, 11,0xffffff
        ).setBackground(c.patternColor([0x004000, 0x008000], 2))
    #setBackground(0xccccff, 0x000000, glassEffect())
    # Set the y axis label format to nn%
    c.yAxis().setLabelFormat("{value}")

    # Set the labels on the x axis
    c.xAxis().setLabels(labels)#.setFontAngle(45)
    #c.xAxis().setLabelStyle(defaultfont, 9, 0x008000).setFontAngle(45)
    c.xAxis().setReverse()
    # Set the axes width to 2 pixels
    c.xAxis().setWidth(0)
    c.yAxis().setWidth(0)
    
    c.addAreaLayer(data0, 
        c.linearGradientColor(0, 50, 0, 255, 0x80ff0000L, 0x80ffffffL))
    
    layer = c.addSplineLayer() #addLineLayer()
    layer.setLineWidth(0)
    layer.setDataLabelFormat("{value|0}")
    layer.addDataSet(data0, 0xcf4040, "播放次数").setDataSymbol(CircleSymbol, 9,0xffff00)
    # Add the second line. Plot the points with a 9 pixel dismond symbol
    #layer.addDataSet(data1, 0x40cf40, "UIP").setDataSymbol(DiamondSymbol, 9)

    # output the chart
    c.makeChart(cdrPNG)
    ## 输出可点击区域定义
    imageMap = c.getHTMLImageMap("adplayed/{xLabel}-ad.log"
        , "date={xLabel}"
        , "title='{xLabel}:: {value|0} '")
    return imageMap
</t>
<t tx="zoomq.20090728225824.65">&lt;&lt; declarations &gt;&gt;
''''ad10song.py'
    - v0.7 070628 for 0707 功能广告统计
    - v0.8 070725 for 综合图表配合支持
    - v0.9 070802 for monther porter
    - v1.0 070803 fixed monther export dumps files path
'''
VERSION = "adclicks.py v1.0-070803@Zoom.Quiet"
ADPD = {
    "all":{'wc':0,'uip':0,'name':"总计"}
    ,"404":{'wc':0,'uip':0,'name':"请求错误"}
    ,"ver4":{'wc':0,'uip':0,'name':"MV广告"}
    ,"ver5.":{'wc':0,'uip':0,'name':"功能广告"}
    ,"ver5-250230":{'wc':0,'uip':0,'name':"矩形"}
    ,"ver5-300250":{'wc':0,'uip':0,'name':"画中画"}
    ,"ver5-750120":{'wc':0,'uip':0,'name':"通栏"}
    }

@others

if __name__ == '__main__':      # this way the module can be
    if 3 != len(sys.argv):
        print """ %s usage::
        $ python adclicks.py 'path/to/chinese.font.ttf' datePoint [like 070719]
        """ % VERSION
    else:
        defaultfont = sys.argv[1] #[-10:-4]    print tonow
        crtMonth = sys.argv[2][:4] #[-10:-4]    print tonow
        tonow = sys.argv[2]
        #dailyTpl = 'adp_dailyrep.tpl'
        historicTpl = 'adp_historic.tpl'
        print "tyr to analyzing and chart month ad playing "
        exp = "repadp"
        logp = "adplayed"
        #statoday(tonow,logp) #=&gt; 070719-ad.dump
        staToday(tonow,logp,exp)
        #flushHistoric(historicTpl,exp,"YKad. Clik STATs",crtMonth)
        
    print "Mnnnn export all that report!!!!"


</t>
<t tx="zoomq.20090728225824.66"># -*- coding: utf-8 -*-
import os,sys,time,datetime,pickle
from operator import itemgetter

from pychartdir import *

from fnmatch import *



</t>
<t tx="zoomq.20090728225824.67">def staToday(tonow,dataPath,exp):
    '''scaning filtered log files
    '''
    historicDumps = filter(os.listdir(dataPath),"%s-ad*.txt"%tonow)
    historicDumps.sort(reverse=True)
    #historicDumps.sort()
    #print historicDumps
    print ADPD.keys()
    for logf in historicDumps:
        for key in ADPD.keys():
            #print key
            if key in logf:
                #print "%s/%s"%(dataPath,logf)
                for f in ADPD[key].keys():
                    if f in logf:
                        print "%s/%s"%(dataPath,logf)
                        ADPD[key][f] = open("%s/%s"%(dataPath,logf)).read()
                    else:
                        pass
            else:
                #as name
                pass
    #print ADPD
    pickle.dump(ADPD
            ,open("%s/%s/%s-ADPD.dump"%(exp,tonow[:4],tonow),"w"))
        
    return ADPD

</t>
<t tx="zoomq.20090728225824.68">def flushDumps(dataPath):
    '''scaning dir export data list
    '''
    chartDict = {'label':[]
        ,"all":[]
        ,"404":[]
        ,"ver4":[]
        ,"ver5.":[]
        ,"ver5-250230":[]
        ,"ver5-300250":[]
        ,"ver5-750120":[]
    }

    historicDumps = filter(os.listdir(dataPath),"*-ADPD.dump")
    historicDumps.sort(reverse=True)
    #print historicDumps
    for his in historicDumps:
        hisDumpf = "%s/%s"%(dataPath,his)
        print "load and prased %s" % hisDumpf
        hisDict = pickle.load(open(hisDumpf))
        chartDict['label'].append(his[:6])
        for k, v in sorted(hisDict.items()
            , key=lambda x: x[0]
            ,reverse=False):
            chartDict[k].append(hisDict[k]['wc'])
    #print ptDetails
    return chartDict

</t>
<t tx="zoomq.20090728225824.69">def detailsADPlay(dataDict,exPath,crtMonth):
    '''export TAB of ad10 details info.
    '''
    myVer = VERSION
    creaTime = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    TPL = "idx.playmonth.tpl"
    EXP = "%s/%s/index.html" % (exPath,crtMonth)
    DUMPS = "%s/%s" % (exPath,crtMonth)
    logURL="../../adplayed/%s/%s-ad-%s.%s.txt"
    bgMark = ("fefefe","efefef")
    ## exp html TAB
    ptDetails ="&lt;tr&gt;&lt;th&gt;日期&lt;/th&gt;"    
    for k, v in sorted(dataDict.items()
        , key=lambda x: x[0]
        ,reverse=False):
        ptDetails+="&lt;th&gt;%s&lt;br/&gt;&lt;sup&gt;%s&lt;/sup&gt;&lt;/th&gt;"%(dataDict[k]['name'],k)
    ptDetails+="&lt;/tr&gt;"
    historicDumps = filter(os.listdir(DUMPS),"*-ADPD.dump")
    historicDumps.sort(reverse=True)
    #print historicDumps
    count = 0
    for his in historicDumps:
        count+=1
        hisDict = pickle.load(open("%s/%s"%(DUMPS,his)))
        ptDetails+='''&lt;tr style='background-color:#%s;'&gt;&lt;th&gt;%s
            &lt;/th&gt;'''%(bgMark[count%2],his[2:6])
        for k, v in sorted(hisDict.items()
            , key=lambda x: x[0]
            ,reverse=False):
            #print k,v        
            ptDetails+='''&lt;td&gt;
                &lt;sup&gt;::PV&lt;/sup&gt;&lt;a href="%s"&gt;%s&lt;/a&gt;&lt;br/&gt;
                &lt;sub&gt;::UIP&lt;/sub&gt;&lt;a href="%s"&gt;%s&lt;/a&gt;&lt;/td&gt;
                '''%(logURL%(crtMonth,his[:6],k.split(".")[0],"log")
                    ,hisDict[k]['wc']
                    ,logURL%(crtMonth,his[:6],k.split(".")[0],"sort")
                    ,hisDict[k]['uip'])
        ptDetails+="&lt;/tr&gt;"
    #print ptDetails
    
    open(EXP,"w").write(open(TPL).read() % locals())
    return ptDetails



</t>
<t tx="zoomq.20090728225824.70">def chartAdpHistoric(defaultfont
    ,cdrTitle
    ,cdrPNG
    ,dataDict
    ,labelFormat
    ,crtMonth):
    '''利用ChartDirector Ver 4.1 (Python Edition)绘制图表
        - 历史趋势图
    '''
    print "ChartDirector Ver 4.1 drawing %s ..." % cdrPNG
    dataAll = dataDict['all']
    data404 = dataDict['404']
    dataVer4 = dataDict['ver4']
    dataVer5 = dataDict['ver5.']
    labels = dataDict['label']
    cheight = 100+len(labels)*15
    pheight = len(labels)*15
    cwidth = 100+len(labels)*20
    pwidth = len(labels)*20
    c = XYChart(cwidth,240, 0xffffc0, 0x000000, 1)
    #c.setPlotArea(60, 60, pwidth,100, 0xffffff, -1, -1, 0xc0c0c0, -1)
    c.setPlotArea(60, 60, pwidth,100, c.linearGradientColor(0, 55, 0, 335, 
        0xFFF6F5,0xFFB1A8), -1, Transparent, 0xffffff)
    
    #c.swapXY()
    #c.setYAxisOnRight()
    c.setBackground(silverColor(), 0x334433, 1) #metalColor(0xccccff)
    
    c.setRoundedFrame()
    c.setDefaultFonts(defaultfont)
    
    c.addLegend(10, 15, 0, "", 8).setBackground(Transparent)
    
    c.addTitle(cdrTitle,defaultfont, 11,0xffffff
        ).setBackground(c.patternColor([0x004000, 0x008000], 2))
    #setBackground(0xccccff, 0x000000, glassEffect())
    # Set the y axis label format to nn%
    c.yAxis().setLabelFormat("{value}")

    # Set the labels on the x axis
    c.xAxis().setLabels(labels).setFontAngle(90)
    #c.xAxis().setLabelStyle(defaultfont, 9, 0x008000).setFontAngle(45)
    c.xAxis().setReverse()
    # Set the axes width to 2 pixels
    c.xAxis().setWidth(0)
    c.yAxis().setWidth(0)
    
    layer = c.addSplineLayer() #addLineLayer()
    layer.setLineWidth(1)
    #layer.setDataLabelFormat("{value|0}")
    layer.addDataSet(dataAll, 0xcf4040
        ,"all").setDataSymbol(CircleSymbol, 9,0xffff00)
    layer.addDataSet(data404, 0x998888
        ,"404").setDataSymbol(CrossShape(0.3), 8,0x556655)
    layer.addDataSet(dataVer4, 0x40cf40
        ,"ver4").setDataSymbol(PolygonShape(4), 8,0x40cf40)
    layer.addDataSet(dataVer5, 0x4040cf
        ,"ver5").setDataSymbol(PolygonShape(5), 8,0x4040cf)

    #c.addAreaLayer(data404, 
    #    c.gradientColor( 0,50, 0,255, 0xff0000L ,0xffffff ))
        #c.linearGradientColor( 0,50, 0,255,  0x80ff0000L, 0x80ffffffL))


    # output the chart
    c.makeChart(cdrPNG)
    &lt;&lt;chartMap&gt;&gt;



</t>
<t tx="zoomq.20090728225824.71">## 输出可点击区域定义
imageMap = c.getHTMLImageMap("adplayed/%s/{xLabel}-ad-{dataSetName}.log.txt"%crtMonth
    , "date={xLabel}"
    , "title='{xLabel}:: {value|0} '")
return imageMap

</t>
<t tx="zoomq.20090728225824.72">&lt;&lt; yksitemapping declarations &gt;&gt;

@others

if __name__ == '__main__':
    """base usage
    """
    mappingyk = sitemapping()
    ## for Baidu ...
    mappingyk.whatnew()
    ## for google...
    #mappingyk.mapall()
    #mappingyk.genidx()
    #mappingyk.gzipall()




</t>
<t tx="zoomq.20090728225824.73"># -*- coding: utf-8 -*-
'''yksitemapping.py
    v0.8 070614 for idx all song update...
    v0.7 070601 for yseo0
usage tools to Validator xml right?
$ python2.4 /usr/lib/python2.5/site-packages/XSV/commandLine.py --help
Usage: [-ktwilDNend] [-u baseURI] [-T type] [-E elt] [-r [-r [-r]] [ind|alt]] [-s stylesheet] [-o outputFile] [-p profileOut] file [schema1 schema2 . . .]
'''

VERSION = "yksitemapping.py v0.8 070613"

import os,sys,time,datetime
import gzip
import chardet

import adodb
#from pychartdir import *
from fnmatch import *

import logging
daylog = "%s"%(time.strftime("%y%m%d",time.localtime()))
logging.basicConfig(level=logging.DEBUG,
                   format='[%(asctime)s]%(levelname)-8s"%(message)s"',
                    datefmt='%Y-%m-%d %a %H:%M:%S',
                    filename='logs/yksitemap-%s.log'%daylog,
                    filemode='a+')
</t>
<t tx="zoomq.20090728225824.74">class sitemapping:
    """main class zip all done
    """
	@others
</t>
<t tx="zoomq.20090728225824.75">def __init__(self):
    """ini all
    """
    self.mapgz = []
    self.defaultDate = '2007-04-01T00:00:00Z'
    self.priority = 0.5
    self.limitpage = 1024
    self.mapName = "新浪正版音乐仓库 - 乐库 !"

    @others

    #init when creat obj.
    self.result = self.DBscanner()
    print self.result.keys()

</t>
<t tx="zoomq.20090728225824.76">self.exPath = "gsitemap"
self.exWhatnew = "whatnew"
#self.logPath = "logs/"
self.expxml = self.exPath+'/yksitemap.xml'

self.idxTpl = 'yksitemap_xml.tpl'
self.urlTpl = 'yksitemap_url.tpl'

self.idxMap = 'yksitemap_idx-xml.tpl'
self.mapMap = 'yksitemap_map.tpl'

self.whatIdx = 'ykwhatnew.idx.tpl'
self.whatSong = 'ykwhatnew.song.tpl'
self.whatTrac = 'ykwhatnew.trac.tpl'
self.whatRing = 'ykwhatnew.ring.tpl'


</t>
<t tx="zoomq.20090728225824.77">
self.dbhost = "10.210.70.62" #"10.210.70.57"#"localhost"
self.dbname = "MusicLibrary"
self.dbuser = "zoomq"
self.dbpasswd = "ykse01q2w3e"
self.conn = adodb.NewADOConnection('mysql')
#print self.conn
#conn.Connect('server', 'user', 'pwd', 'db')
self.conn.Connect(self.dbhost
    ,self.dbuser
    ,self.dbpasswd
    ,self.dbname)
# for unicode read
self.conn.Execute("set names 'utf8' ;")

self.sql = {
    "status":" WHERE Status=50 "
    ,"type":" AND MediaType=%d "
    ,"time":" AND CreateTime &gt; '%s' "
    ,"orderby":" ORDER BY `OnlineTime` DESC "
    }


</t>
<t tx="zoomq.20090728225824.78">def DBscanner(self):
    """scan table for CoverRate:
        - TAB:Song MediaType=0|1 (song|mv)
    """
    result = {'rowArtist':[],'rowAlbum':[],'rowSong':[]}

    sqlCArtist = "SELECT ArtistID,OnlineTime FROM `Artist` %s %s;"%(
        self.sql['status']
        ,self.sql['orderby'])
        #AND CreateTime&gt;'2007-06-06';"
    sqlCAlbum = "SELECT AlbumID,OnlineTime FROM `Album`  %s %s;"%(
        self.sql['status']
        ,self.sql['orderby'])
        #AND CreateTime&gt;'2007-06-06';"
    sqlCSong = "SELECT SongID,OnlineTime,Name,SongWord FROM `Song` %s %s %s;"%(
        self.sql['status']
        ,self.sql['type']%0
        ,self.sql['orderby'])
        #FROM `Song` WHERE Status=50 AND MediaType=0 ORDER BY `OnlineTime` DESC"
        #AND CreateTime&gt;'2007-06-06';"    
    sqlCMV = "SELECT SongID,OnlineTime FROM `Song` %s %s %s;"%(
        self.sql['status']
        ,self.sql['type']%1
        ,self.sql['orderby'])
        #WHERE Status=50 AND MediaType=1 ORDER BY `OnlineTime` DESC"
        #AND CreateTime&gt;'2007-06-06';"
    today = datetime.date.today()
    print "%s due DB scan start::"%time.strftime("%y%m%d %H:%M:%S",time.localtime())
    logging.info("%s daily DB scan start::"%today)

    result['rowArtist'] = self.conn.GetAll(sqlCArtist)
    result['rowAlbum'] = self.conn.GetAll(sqlCAlbum)
    #print rowAlbum
    result['rowSong'] = self.conn.GetAll(sqlCSong)
    result['rowMV'] = self.conn.GetAll(sqlCMV)

    #print result['rowAlbum']
    print "%s due DB scan end::"%time.strftime("%y%m%d %H:%M:%S",time.localtime())
    logging.info("%s daily DB scan end::"%today)

    return result


</t>
<t tx="zoomq.20090728225824.79">def whatnew(self):
    '''export htmls for Baidu grasp
    '''
    myVer = VERSION
    mapName = self.mapName
    updaTime = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    upDate  = time.strftime("%Y-%m-%d",time.localtime())
    upTrac = ""    
    rs = self.result['rowSong']
    @others

    open("%s/index.html"%self.exWhatnew
        ,"w").write(open(self.whatIdx).read() % locals())
    print "exported root idx::\n  %s/index.html"% self.exWhatnew

    #print rs['rowSong'][122][1].strftime("%Y-%m-%dT%H:%M:%SZ")
    print "export all! %s/index.html"%self.exWhatnew







</t>
<t tx="zoomq.20090728225824.80">hotop = ""
for song in rs[:21]:
    #SongID,OnlineTime,Name,SongWord
    SongID = song[0]
    #print SongID
    try:
        OnlineTime = song[1].strftime("%Y-%m-%dT%H:%M:%SZ")
    except:
        OnlineTime = self.defaultDate
    Name = song[2]      #self._smartcode(song[2])
    #print Name
    SongWord = " ` ".join(song[3].split())  #self._smartcode(song[3])
    hotop += open(self.whatSong).read() % locals()



</t>
<t tx="zoomq.20090728225824.81">safelock = self.limitpage
pageTime = ""
songList = ""
for song in rs[22:]:
    #SongID,OnlineTime,Name,SongWord
    SongID = song[0]    
    try:
        OnlineTime = song[1].strftime("%Y-%m-%dT%H:%M:%SZ")
    except:
        OnlineTime = self.defaultDate
    #OnlineTime = song[1].strftime("%Y-%m-%dT%H:%M:%SZ")
    Name = song[2]      #self._smartcode(song[2])
    #print Name
    SongWord = " ` ".join(song[3].split())  #self._smartcode(song[3])
    songList += open(self.whatSong).read() % locals()
    safelock -=1
    if 0 == safelock:
        #export as .htm
        pageTime = OnlineTime
        open("%s/idx%s.htm"% (self.exWhatnew,SongID)
            ,"w").write(open(self.whatRing).read() % locals())
        print "exported::%s/idx%s.htm"% (self.exWhatnew,SongID)
        songList = ""
        safelock = self.limitpage


</t>
<t tx="zoomq.20090728225824.82">historicPage = filter(os.listdir(self.exWhatnew),"*.htm")
print historicPage

for his in historicPage:
    hisPage = his[:-4]
    upTrac += open(self.whatTrac).read() % locals()

</t>
<t tx="zoomq.20090728225824.83">def _smartcode(self,stream):
    """smart recove stream into UTF-8
    """
    ustring = stream
    codedetect = chardet.detect(ustring)["encoding"]
    print codedetect
    try:
        print ustring
        ustring = unicode(ustring, codedetect)
        print ustring
        return "%s %s"%("",ustring.encode('utf8'))
    except:
        return u"bad unicode encode try!"

</t>
<t tx="zoomq.20090728225824.84">def gzipall(self,xml,gzipfn):
    '''export gziped xml files
    '''
    gzfn = "%s-%s.xml.gz" % (gzipfn,daylog)
    print "gziped ::%s" % gzfn
    gz = gzip.GzipFile("%s/%s" % (self.exPath,gzfn),"w")
    gz.write(xml)
    #self.mapgz.append(gzfn)





</t>
<t tx="zoomq.20090728225824.85">def map2gz(self,relist,urltpl,fname):
    '''export xml.gz 
    datetime.date.today().strftime("%Y-%m-%d")
    '''
    urlxml = self.xmlurl(relist
        ,urltpl
        ,open(self.urlTpl).read())    

    if 0==len(urlxml):
        print "none export"
        return 
    else:
        for i in range(len(urlxml)):
            urls = urlxml[i]
            self.gzipall(open(self.idxTpl).read() % locals()
                ,"%s-%s" % (fname,i)
                )    
    print "%s::due mapping all %s into xml done..." % (VERSION,fname)
    logging.info("%s::due mapping all %s into xml done..."% (VERSION,fname))


</t>
<t tx="zoomq.20090728225824.86">def xmlurl(self,data,urltpl,xmltpl):
    '''usage data list with tpl return all url MXL nodes
        - add safe lock as 40960
    '''
    safelimi = 40960
    expxmli = []
    xml = ""
    count = 0
    if 0 == len(data):
        print "empty update!"
        return expxmli
    else:            

        for d in data:
            if None == d[1]:
                priority = "%f" % self.priority
                update = self.defaultDate
            else:
                priority = "%f" % (self.priority+0.1)
                update = d[1].strftime("%Y-%m-%dT%H:%M:%SZ")
            ykurl = urltpl % d[0]
            if count == safelimi:
                xml += xmltpl % locals()
                expxmli.append(xml)
                print "safed: %d "%count
                xml = ""
                count = 0            
            else:
                xml += xmltpl % locals()
                count += 1
    print "finally: %d"%count
    expxmli.append(xml)
    return expxmli


</t>
<t tx="zoomq.20090728225824.87">def mapall(self):
    '''scan DB and export xml
    datetime.date.today().strftime("%Y-%m-%d")
    '''
    result = self.result
    url2album = "http://music.sina.com.cn/yueku/a/%s.html"
    url2artist = "http://music.sina.com.cn/yueku/s/%s.html"
    url2song = "http://music.sina.com.cn/yueku/m/%s.html"    
    url2mv = "http://music.sina.com.cn/yueku/v/%s.html"    

    self.map2gz(result['rowAlbum'],url2album,"ykAlbum")
    self.map2gz(result['rowArtist'],url2artist,"ykArtist")
    self.map2gz(result['rowSong'],url2song,"ykSong")
    self.map2gz(result['rowMV'],url2mv,"ykMV")


</t>
<t tx="zoomq.20090728225824.88">def genidx(self):
    '''found all .gz export the sitemapindex
    '''
    historicGzs = filter(os.listdir(self.exPath),"*.gz")
    print historicGzs

    url2gz = "http://music.sina.com.cn/%s"    
    sitemaps = ""
    for gz in historicGzs:
        ykmap = url2gz % gz
        update = time.strftime("%Y-%m-%dT%H:%M:%SZ",
            time.localtime(os.path.getmtime("%s/%s" % (self.exPath,gz)))
            )

        #update = "%s"%(time.strftime("%Y-%m-%dT%H:%M:%SZ",time.localtime()))
        sitemaps += open(self.mapMap).read() % locals()
    open(self.expxml,"w").write(open(self.idxMap).read() % locals())
    #self.mapMap
    #self.mapgz.append(gzfn)





</t>
<t tx="zoomq.20090728225824.89">&lt;&lt; declarations &gt;&gt;

@others

if __name__ == '__main__':
    """base usage
    """
    if 2 != len(sys.argv):
        print """ %s usage::
        $ python eb0replayer.py 'path/to/warfield.txt' 
        """ % VERSION
    else:
        warlog = sys.argv[1]
        rep = replayer(warlog)
        rep.play()
    ## for google...
    #mappingyk.mapall()
    #mappingyk.genidx()
    #mappingyk.gzipall()




</t>
<t tx="zoomq.20090728225824.90"># -*- coding: utf-8 -*-
'''eb0replay.py
    v9.07.28 init.
'''

VERSION = "eb0replay.py v9.07.28"

import os,sys,time,datetime
#from fnmatch import *
import urwid.curses_display
import urwid

import logging
daylog = "%s"%(time.strftime("%y%m%d",time.localtime()))
logging.basicConfig(level=logging.DEBUG,
                   format='[%(asctime)s]%(levelname)-8s"%(message)s"',
                    datefmt='%Y-%m-%d %a %H:%M:%S',
                    filename='logs/ebreplay-%s.log'%daylog,
                    filemode='a+')
#logging.info("%s::due mapping all %s into xml done..."% (VERSION,fname))</t>
<t tx="zoomq.20090728225824.91">class replayer:
    """main class zip all done
    """
	@others
</t>
<t tx="zoomq.20090728225824.92">def __init__(self,warlog):
    """ini all
    """
    self.grid = 15
    self.showmetre = 0.5
    @others
    self.ebf  = []
    self.ebfp = "   "
    self.ebfe = " ~ "*self.grid+"\n"
    self.init_ebf()
    #print self.ebf
    #print self.exp_ebf()
    self.war = open(warlog).readlines()
    #print self.war


</t>
<t tx="zoomq.20090728225824.95">def init_ebf(self):
    """init ebf dict for replay
    """
    self.ebf  = []
    for i in range(self.grid):
        self.ebf.append([self.ebfp for j in range(self.grid)])
    pass
    #return self.ebf

</t>
<t tx="zoomq.20090728225824.106">def run2(self):
    """replay all
    """	
    cols, rows = self.ui.get_cols_rows()
	txt = urwid.Text(self.ebf, align="center")
	fill = urwid.Filler( txt )
    canvas = fill.render( (cols, rows) )
    #txt = urwid.Text(('banner', self.ebf), align="center")
	#wrap1 = urwid.AttrWrap( txt, 'streak' )
	#fill = urwid.Filler( wrap1 )
	#bg color
    #wrap2 = urwid.AttrWrap( fill, 'bg' )
	#canvas = wrap2.render( (cols, rows) )

    self.ui.draw_screen( (cols, rows), canvas )

	while not self.ui.get_input():
		pass



</t>
<t tx="zoomq.20090728225824.107">def run0(self):
    """replay all
    """
    canvas = urwid.TextCanvas(["Hello World"])
	self.ui.draw_screen( (20, 1), canvas )

	while not self.ui.get_input():
		pass



</t>
<t tx="zoomq.20090728225824.108">def run(self):
    """replay all
    """	
    cols, rows = self.ui.get_cols_rows()

    metrefl = []
    metre = "0"
    loop = 0
    for act in self.war:
        al = act.split(",")
        #print al[0]
        if "plan"==al[0]:
            pass
        else:
            if metre == al[0]:
                metrefl.append(act)
            else:
                #print len(metrefl)
                self._rewar(metrefl)
                #print self.exp_ebf()
                ptxt = self.exp_ebf()
                self._draw_screen(ptxt)
                ## next metre show
                time.sleep(self.showmetre)
                if 0==loop%2:
                    self.init_ebf()
                else:
                    pass
                loop += 1
                metre = al[0]
                metrefl = []
                metrefl.append(act)

	while not self.ui.get_input():
		pass



</t>
<t tx="zoomq.20090728225824.109">def play(self):
    """replay all
    """
    self.ui.run_wrapper(self.run)


</t>
<t tx="zoomq.20090728225824.110">def exp_ebf(self):
    """export ebf list as string...
    """
    exp = VERSION+"\n"
    for line in self.ebf:
        exp += "".join(line)
        exp += "\n"
        exp += self.ebfe

    return exp

</t>
<t tx="zoomq.20090728225824.111">def _draw_screen(self,ptxt):
    """replay all
    """	
    cols, rows = self.ui.get_cols_rows()
	txt = urwid.Text(ptxt, align="center")
	fill = urwid.Filler( txt )
	canvas = fill.render( (cols, rows) )
	self.ui.draw_screen( (cols, rows), canvas )



</t>
<t tx="zoomq.20090728225824.112">self.ui = urwid.curses_display.Screen()
self.ui.register_palette( [
    ('banner', 'black', 'light gray', ('standout', 'underline')),
    ('streak', 'black', 'dark red', 'standout'),
    ('bg', 'black', 'dark blue'),
    ] )
</t>
<t tx="zoomq.20090728225824.113">##tpl for soldier point
self.ebsp = " %s%s" # self+action code
#eb0 read soldier: #math code ∧ ∨
self.ebrs={"w":"&lt;"
    ,"e":"&gt;"
    ,"s":"∨"
    ,"n":"∧"
    }
#eb0 blue soldier: ← ↑ → ↓
self.ebbs={"w":"←"
    ,"e":"→"
    ,"s":"↓"
    ,"n":"↑"
    }
#eb0 soldier turn: ↖ ↗ ↘ ↙ turnWest, turnEast, turnSouth, turnNorth
self.ebst={"turnWest":"↖"
    ,"turnEast":"↗"
    ,"turnSouth":"↘"
    ,"turnNorth":"↗"
    }
#eb0 soldier fight:▲►▼◄
self.ebsf={"w":"◄"
    ,"e":"►"
    ,"s":"▼"
    ,"n":"▲"
    }
#eb0 soldier act:walk stand status fight back plan
self.ebsa={"walk":"."
    ,"stand":"_"
    ,"status":"!"
    ,"back":"r"
    ,"plan":"?"
    }
</t>
<t tx="zoomq.20090729011307.1">def _rewar(self,metrefl):
    """re understand EB war
        - metre fight list
    """
    attack_is = ""
    trun_is = ""
    other_is = ""
    self.init_ebf()
    for act in metrefl:
        al = act.split(",")
        move=al[1]
        y=int(al[2])
        x=int(al[3])
        sid=al[4]
        face=al[5]
        #print len(self.ebf[2])        
        if "fight"==move:
            attack_is = self.ebsf[face]
        elif "turn" in move:
            trun_is = self.ebst[move]
        else:
            other_is =self.ebsa[move]
        action=attack_is+trun_is+other_is
        if 10&lt;int(sid):
            #blue team fight
            #print x,y
            self.ebf[x][y]=self.ebsp%(self.ebrs[face],action)
        else:
            #red team
            self.ebf[x][y]=self.ebsp%(self.ebbs[face],action)

</t>
</tnodes>
</leo_file>
